// Generated from C:/Users/Abeer/IdeaProjects/compileedit/src/Compiler\dartParser.g4 by ANTLR 4.10.1
package Compiler;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;

import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class dartParser extends Parser {
    public static final int
            INITSTATE = 1, TITLE = 2, THEME = 3, DEBUGSHOWMODE = 4, ThemeData = 5, PrimarySwatch = 6,
            BIGER = 7, SMALLER = 8, OPERATION = 9, SCAFFOLD = 10, Q_MARK = 11, STATE = 12, CREATSTATE = 13,
            KEY = 14, FULL = 15, LESS = 16, FOREACH = 17, FOR = 18, TEXT = 19, CHIS = 20, OPEN_PR = 21,
            CLOSE_PR = 22, COLUMN = 23, ROW = 24, FIT = 25, BOXFIT = 26, FILL = 27, WS = 28, ASSET = 29,
            IMAGE = 30, APPBAR2 = 31, APPBAR = 32, BACK = 33, MAIN = 34, BODY = 35, RUNAPP = 36,
            LIST = 37, BUILD = 38, OVERRIDE = 39, SETSTATE = 40, ONTAP = 41, GestureDetector = 42,
            WIDGET = 43, BUILDCONTEXT = 44, PADDING = 45, PADDING1 = 46, EDGE = 47, ALL = 48,
            VOID = 49, TYPE = 50, HEIGHT = 51, WIDTH = 52, BOOL_VAL = 53, SIZEDBOX = 54, CONTAINER = 55,
            CHILD = 56, COLORS = 57, COL = 58, COLOR = 59, D_DOT = 60, DOT = 61, BORDER2 = 62, EXPANDED = 63,
            CIRCULAR = 64, BORDERRADIUS = 65, DECORATION = 66, BD = 67, LISTVIEW = 68, SEPARATED = 69,
            ItemBuilder = 70, SeparatorBuilder = 71, ItemCount = 72, Return = 73, MAINAXIS = 74,
            MAINAXIS1 = 75, CENTER = 76, CONTEXT = 77, INDEX = 78, EQUAL = 79, NUM_VAL = 80, SIMICOLON = 81,
            COLON = 82, OPEN_HEAD = 83, CLOSE_HEAD = 84, OPEN_BODY = 85, CLOSE_BODY = 86, FINAL = 87,
            CONST = 88, VAR = 89, ASYNC = 90, THIS = 91, ABSTRACT = 92, AS = 93, SYNC = 94, CLASS = 95,
            WITH = 96, STATIC = 97, DYNAMIC = 98, EXTERNAL = 99, GET = 100, SET = 101, OPERATOR = 102,
            SUPER = 103, FACTORY = 104, EXTENDS = 105, IMPLEMENTS = 106, ENUM = 107, NULL = 108,
            THROW = 109, NEW = 110, AWAIT = 111, DEFERRED = 112, EXPORT = 113, IMPORT = 114, LIBRARY = 115,
            PART = 116, TYPEDEF = 117, IS = 118, IF = 119, ELSE = 120, WHILE = 121, IN = 122, DO = 123,
            SWITCH = 124, CASE = 125, DEFAULT = 126, RETHROW = 127, TRY = 128, ON = 129, CATCH = 130,
            FINALLY = 131, RETURN = 132, BREAK = 133, CONTINUE = 134, YIELD = 135, SHOW = 136,
            HIDE = 137, OF = 138, ASSERT = 139, MATERIALAPP = 140, GMA = 141, GET1 = 142, TO = 143,
            OFF = 144, HOME = 145, VAR_NAME = 146, STRING_OPEN = 147, STRING_VAL = 148, STRING_CLOSE = 149,
            PRACET = 150, CLOSE_PRACET = 151, NUMBER = 152, HEX_NUMBER = 153, SingleLineString = 154,
            MultilineString = 155, IDENTIFIER_NO_DOLLAR = 156, IDENTIFIER = 157;
    public static final int
            RULE_prog = 0, RULE_file_syntax = 1, RULE_declear_var = 2, RULE_string_val = 3,
            RULE_val = 4, RULE_ifdart = 5, RULE_arguments = 6, RULE_block = 7, RULE_function = 8,
            RULE_for = 9, RULE_flutter = 10, RULE_imporT = 11, RULE_main = 12, RULE_runapp = 13,
            RULE_class = 14, RULE_class_less = 15, RULE_class_full = 16, RULE_class_full1 = 17,
            RULE_const = 18, RULE_state = 19, RULE_class_full2 = 20, RULE_initstate = 21,
            RULE_build = 22, RULE_widget = 23, RULE_child = 24, RULE_materialapp = 25,
            RULE_navigate_screen = 26, RULE_home = 27, RULE_title = 28, RULE_theme = 29,
            RULE_debugshowmode = 30, RULE_column = 31, RULE_row = 32, RULE_children = 33,
            RULE_text = 34, RULE_image = 35, RULE_scaffold = 36, RULE_appbar = 37,
            RULE_body = 38, RULE_padding1 = 39, RULE_padding = 40, RULE_expanded = 41,
            RULE_sizedbox = 42, RULE_hieght = 43, RULE_width = 44, RULE_listview = 45,
            RULE_itb = 46, RULE_sb = 47, RULE_ic = 48, RULE_container = 49, RULE_bord_rad = 50,
            RULE_color = 51, RULE_colors = 52, RULE_decoration = 53, RULE_list = 54,
            RULE_object = 55, RULE_varible = 56, RULE_gestureDetector = 57, RULE_ontap = 58,
            RULE_setstate = 59, RULE_setstate1 = 60;
    public static final String[] ruleNames = makeRuleNames();
    /**
     * @deprecated Use {@link #VOCABULARY} instead.
     */
    @Deprecated
    public static final String[] tokenNames;
    public static final String _serializedATN =
            "\u0004\u0001\u009d\u0318\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001" +
                    "\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004" +
                    "\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007" +
                    "\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b" +
                    "\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007" +
                    "\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007" +
                    "\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007" +
                    "\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007" +
                    "\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007" +
                    "\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007" +
                    "\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007" +
                    "\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007" +
                    "\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007" +
                    ",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007" +
                    "1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007" +
                    "6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007" +
                    ";\u0002<\u0007<\u0001\u0000\u0001\u0000\u0004\u0000}\b\u0000\u000b\u0000" +
                    "\f\u0000~\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0002" +
                    "\u0003\u0002\u0086\b\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0003\u0002" +
                    "\u008b\b\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0003\u0002" +
                    "\u0091\b\u0002\u0005\u0002\u0093\b\u0002\n\u0002\f\u0002\u0096\t\u0002" +
                    "\u0001\u0002\u0001\u0002\u0001\u0003\u0001\u0003\u0003\u0003\u009c\b\u0003" +
                    "\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004" +
                    "\u00a3\b\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005" +
                    "\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u0006" +
                    "\u0003\u0006\u00b0\b\u0006\u0001\u0006\u0003\u0006\u00b3\b\u0006\u0001" +
                    "\u0006\u0001\u0006\u0001\u0006\u0005\u0006\u00b8\b\u0006\n\u0006\f\u0006" +
                    "\u00bb\t\u0006\u0001\u0006\u0001\u0006\u0001\u0007\u0001\u0007\u0005\u0007" +
                    "\u00c1\b\u0007\n\u0007\f\u0007\u00c4\t\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\b\u0001\b\u0001\b\u0005\b\u00cb\b\b\n\b\f\b\u00ce\t\b\u0001\b\u0001\b" +
                    "\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001" +
                    "\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0003\t\u00e2" +
                    "\b\t\u0001\t\u0001\t\u0001\n\u0005\n\u00e7\b\n\n\n\f\n\u00ea\t\n\u0001" +
                    "\n\u0001\n\u0005\n\u00ee\b\n\n\n\f\n\u00f1\t\n\u0001\n\u0004\n\u00f4\b" +
                    "\n\u000b\n\f\n\u00f5\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001" +
                    "\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\r\u0001" +
                    "\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\u000e\u0001\u000e" +
                    "\u0003\u000e\u010e\b\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f" +
                    "\u0001\u000f\u0001\u000f\u0005\u000f\u0116\b\u000f\n\u000f\f\u000f\u0119" +
                    "\t\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001" +
                    "\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001" +
                    "\u0011\u0001\u0011\u0003\u0011\u0128\b\u0011\u0001\u0011\u0001\u0011\u0001" +
                    "\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001" +
                    "\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001" +
                    "\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001" +
                    "\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001" +
                    "\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001" +
                    "\u0013\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001" +
                    "\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0005" +
                    "\u0014\u0156\b\u0014\n\u0014\f\u0014\u0159\t\u0014\u0001\u0014\u0001\u0014" +
                    "\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015" +
                    "\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015" +
                    "\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0016" +
                    "\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016" +
                    "\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0017" +
                    "\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017" +
                    "\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0003\u0017" +
                    "\u0186\b\u0017\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0019" +
                    "\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0191\b\u0019" +
                    "\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u0196\b\u0019\u0001\u0019" +
                    "\u0001\u0019\u0001\u0019\u0003\u0019\u019b\b\u0019\u0001\u0019\u0001\u0019" +
                    "\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a" +
                    "\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001b" +
                    "\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001c" +
                    "\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001\u001d" +
                    "\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d" +
                    "\u0001\u001d\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001f" +
                    "\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f" +
                    "\u0003\u001f\u01c9\b\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001 " +
                    "\u0001 \u0001 \u0001 \u0001 \u0001!\u0001!\u0001!\u0001!\u0001!\u0001" +
                    "!\u0001!\u0001!\u0001!\u0005!\u01dc\b!\n!\f!\u01df\t!\u0003!\u01e1\b!" +
                    "\u0001!\u0001!\u0001!\u0005!\u01e6\b!\n!\f!\u01e9\t!\u0003!\u01eb\b!\u0003" +
                    "!\u01ed\b!\u0001!\u0001!\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001" +
                    "\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0001\"\u0003\"\u01fd\b\"\u0001" +
                    "\"\u0001\"\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001#\u0001" +
                    "#\u0001#\u0001#\u0001#\u0001#\u0003#\u020e\b#\u0001#\u0001#\u0001#\u0001" +
                    "#\u0001#\u0003#\u0215\b#\u0001#\u0001#\u0001$\u0001$\u0001$\u0001$\u0001" +
                    "$\u0003$\u021e\b$\u0001$\u0001$\u0001$\u0001%\u0001%\u0001%\u0001%\u0001" +
                    "%\u0001%\u0001%\u0003%\u022a\b%\u0001%\u0001%\u0001&\u0001&\u0001&\u0001" +
                    "&\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001(\u0001" +
                    "(\u0001(\u0001(\u0001(\u0003(\u023e\b(\u0001(\u0001(\u0001)\u0001)\u0001" +
                    ")\u0001)\u0001)\u0001*\u0001*\u0001*\u0001*\u0003*\u024b\b*\u0001*\u0001" +
                    "*\u0001*\u0003*\u0250\b*\u0003*\u0252\b*\u0001*\u0001*\u0001+\u0001+\u0001" +
                    "+\u0001+\u0001,\u0001,\u0001,\u0001,\u0001-\u0001-\u0001-\u0001-\u0001" +
                    "-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001" +
                    ".\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001/\u0001" +
                    "/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001/\u00010\u00010\u0001" +
                    "0\u00010\u00010\u00010\u00010\u00010\u00030\u0286\b0\u00011\u00011\u0001" +
                    "1\u00011\u00011\u00031\u028d\b1\u00011\u00031\u0290\b1\u00011\u00011\u0003" +
                    "1\u0294\b1\u00011\u00011\u00012\u00012\u00012\u00012\u00012\u00012\u0001" +
                    "2\u00012\u00012\u00013\u00013\u00013\u00013\u00014\u00014\u00014\u0001" +
                    "4\u00015\u00015\u00015\u00015\u00015\u00055\u02ae\b5\n5\f5\u02b1\t5\u0001" +
                    "5\u00015\u00015\u00015\u00015\u00015\u00035\u02b9\b5\u00015\u00055\u02bc" +
                    "\b5\n5\f5\u02bf\t5\u00015\u00015\u00016\u00016\u00016\u00016\u00016\u0001" +
                    "6\u00016\u00056\u02ca\b6\n6\f6\u02cd\t6\u00016\u00016\u00017\u00017\u0001" +
                    "7\u00017\u00057\u02d5\b7\n7\f7\u02d8\t7\u00017\u00017\u00018\u00018\u0001" +
                    "8\u00018\u00019\u00019\u00019\u00019\u00019\u00019\u00019\u0001:\u0001" +
                    ":\u0001:\u0001:\u0001:\u0001:\u0003:\u02ed\b:\u0001:\u0003:\u02f0\b:\u0001" +
                    ":\u0005:\u02f3\b:\n:\f:\u02f6\t:\u0001:\u0001:\u0001;\u0001;\u0001;\u0001" +
                    ";\u0001;\u0001;\u0005;\u0300\b;\n;\f;\u0303\t;\u0001;\u0001;\u0001;\u0001" +
                    ";\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001" +
                    "<\u0001<\u0001<\u0001<\u0003<\u0316\b<\u0001<\u0000\u0000=\u0000\u0002" +
                    "\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e" +
                    " \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvx\u0000\u0002\u0001\u0000" +
                    "12\u0001\u0000\u008f\u0090\u031f\u0000|\u0001\u0000\u0000\u0000\u0002" +
                    "\u0082\u0001\u0000\u0000\u0000\u0004\u0085\u0001\u0000\u0000\u0000\u0006" +
                    "\u0099\u0001\u0000\u0000\u0000\b\u00a2\u0001\u0000\u0000\u0000\n\u00a4" +
                    "\u0001\u0000\u0000\u0000\f\u00ad\u0001\u0000\u0000\u0000\u000e\u00be\u0001" +
                    "\u0000\u0000\u0000\u0010\u00c7\u0001\u0000\u0000\u0000\u0012\u00d1\u0001" +
                    "\u0000\u0000\u0000\u0014\u00e8\u0001\u0000\u0000\u0000\u0016\u00f7\u0001" +
                    "\u0000\u0000\u0000\u0018\u00fb\u0001\u0000\u0000\u0000\u001a\u0103\u0001" +
                    "\u0000\u0000\u0000\u001c\u010d\u0001\u0000\u0000\u0000\u001e\u010f\u0001" +
                    "\u0000\u0000\u0000 \u011e\u0001\u0000\u0000\u0000\"\u0121\u0001\u0000" +
                    "\u0000\u0000$\u012d\u0001\u0000\u0000\u0000&\u013f\u0001\u0000\u0000\u0000" +
                    "(\u014c\u0001\u0000\u0000\u0000*\u0160\u0001\u0000\u0000\u0000,\u016d" +
                    "\u0001\u0000\u0000\u0000.\u0185\u0001\u0000\u0000\u00000\u0187\u0001\u0000" +
                    "\u0000\u00002\u018b\u0001\u0000\u0000\u00004\u019f\u0001\u0000\u0000\u0000" +
                    "6\u01a9\u0001\u0000\u0000\u00008\u01af\u0001\u0000\u0000\u0000:\u01b3" +
                    "\u0001\u0000\u0000\u0000<\u01bd\u0001\u0000\u0000\u0000>\u01c1\u0001\u0000" +
                    "\u0000\u0000@\u01cd\u0001\u0000\u0000\u0000B\u01d2\u0001\u0000\u0000\u0000" +
                    "D\u01f0\u0001\u0000\u0000\u0000F\u0200\u0001\u0000\u0000\u0000H\u0218" +
                    "\u0001\u0000\u0000\u0000J\u0222\u0001\u0000\u0000\u0000L\u022d\u0001\u0000" +
                    "\u0000\u0000N\u0231\u0001\u0000\u0000\u0000P\u0238\u0001\u0000\u0000\u0000" +
                    "R\u0241\u0001\u0000\u0000\u0000T\u0246\u0001\u0000\u0000\u0000V\u0255" +
                    "\u0001\u0000\u0000\u0000X\u0259\u0001\u0000\u0000\u0000Z\u025d\u0001\u0000" +
                    "\u0000\u0000\\\u026b\u0001\u0000\u0000\u0000^\u0274\u0001\u0000\u0000" +
                    "\u0000`\u0285\u0001\u0000\u0000\u0000b\u0287\u0001\u0000\u0000\u0000d" +
                    "\u0297\u0001\u0000\u0000\u0000f\u02a0\u0001\u0000\u0000\u0000h\u02a4\u0001" +
                    "\u0000\u0000\u0000j\u02a8\u0001\u0000\u0000\u0000l\u02c2\u0001\u0000\u0000" +
                    "\u0000n\u02d0\u0001\u0000\u0000\u0000p\u02db\u0001\u0000\u0000\u0000r" +
                    "\u02df\u0001\u0000\u0000\u0000t\u02e6\u0001\u0000\u0000\u0000v\u02f9\u0001" +
                    "\u0000\u0000\u0000x\u0308\u0001\u0000\u0000\u0000z}\u0003\u0002\u0001" +
                    "\u0000{}\u0003\u0010\b\u0000|z\u0001\u0000\u0000\u0000|{\u0001\u0000\u0000" +
                    "\u0000}~\u0001\u0000\u0000\u0000~|\u0001\u0000\u0000\u0000~\u007f\u0001" +
                    "\u0000\u0000\u0000\u007f\u0080\u0001\u0000\u0000\u0000\u0080\u0081\u0005" +
                    "\u0000\u0000\u0001\u0081\u0001\u0001\u0000\u0000\u0000\u0082\u0083\u0003" +
                    "\u0004\u0002\u0000\u0083\u0003\u0001\u0000\u0000\u0000\u0084\u0086\u0005" +
                    "2\u0000\u0000\u0085\u0084\u0001\u0000\u0000\u0000\u0085\u0086\u0001\u0000" +
                    "\u0000\u0000\u0086\u0087\u0001\u0000\u0000\u0000\u0087\u008a\u0005\u0092" +
                    "\u0000\u0000\u0088\u0089\u0005O\u0000\u0000\u0089\u008b\u0003\b\u0004" +
                    "\u0000\u008a\u0088\u0001\u0000\u0000\u0000\u008a\u008b\u0001\u0000\u0000" +
                    "\u0000\u008b\u0094\u0001\u0000\u0000\u0000\u008c\u008d\u0005R\u0000\u0000" +
                    "\u008d\u0090\u0005\u0092\u0000\u0000\u008e\u008f\u0005O\u0000\u0000\u008f" +
                    "\u0091\u0003\b\u0004\u0000\u0090\u008e\u0001\u0000\u0000\u0000\u0090\u0091" +
                    "\u0001\u0000\u0000\u0000\u0091\u0093\u0001\u0000\u0000\u0000\u0092\u008c" +
                    "\u0001\u0000\u0000\u0000\u0093\u0096\u0001\u0000\u0000\u0000\u0094\u0092" +
                    "\u0001\u0000\u0000\u0000\u0094\u0095\u0001\u0000\u0000\u0000\u0095\u0097" +
                    "\u0001\u0000\u0000\u0000\u0096\u0094\u0001\u0000\u0000\u0000\u0097\u0098" +
                    "\u0005Q\u0000\u0000\u0098\u0005\u0001\u0000\u0000\u0000\u0099\u009b\u0005" +
                    "\u0093\u0000\u0000\u009a\u009c\u0005\u0094\u0000\u0000\u009b\u009a\u0001" +
                    "\u0000\u0000\u0000\u009b\u009c\u0001\u0000\u0000\u0000\u009c\u009d\u0001" +
                    "\u0000\u0000\u0000\u009d\u009e\u0005\u0095\u0000\u0000\u009e\u0007\u0001" +
                    "\u0000\u0000\u0000\u009f\u00a3\u0003\u0006\u0003\u0000\u00a0\u00a3\u0005" +
                    "P\u0000\u0000\u00a1\u00a3\u00055\u0000\u0000\u00a2\u009f\u0001\u0000\u0000" +
                    "\u0000\u00a2\u00a0\u0001\u0000\u0000\u0000\u00a2\u00a1\u0001\u0000\u0000" +
                    "\u0000\u00a3\t\u0001\u0000\u0000\u0000\u00a4\u00a5\u0005\u0092\u0000\u0000" +
                    "\u00a5\u00a6\u0005O\u0000\u0000\u00a6\u00a7\u0005O\u0000\u0000\u00a7\u00a8" +
                    "\u0003\u0006\u0003\u0000\u00a8\u00a9\u0005\u000b\u0000\u0000\u00a9\u00aa" +
                    "\u0003.\u0017\u0000\u00aa\u00ab\u0005<\u0000\u0000\u00ab\u00ac\u0003." +
                    "\u0017\u0000\u00ac\u000b\u0001\u0000\u0000\u0000\u00ad\u00af\u0005S\u0000" +
                    "\u0000\u00ae\u00b0\u00052\u0000\u0000\u00af\u00ae\u0001\u0000\u0000\u0000" +
                    "\u00af\u00b0\u0001\u0000\u0000\u0000\u00b0\u00b2\u0001\u0000\u0000\u0000" +
                    "\u00b1\u00b3\u0005\u0092\u0000\u0000\u00b2\u00b1\u0001\u0000\u0000\u0000" +
                    "\u00b2\u00b3\u0001\u0000\u0000\u0000\u00b3\u00b9\u0001\u0000\u0000\u0000" +
                    "\u00b4\u00b5\u0005R\u0000\u0000\u00b5\u00b6\u00052\u0000\u0000\u00b6\u00b8" +
                    "\u0005\u0092\u0000\u0000\u00b7\u00b4\u0001\u0000\u0000\u0000\u00b8\u00bb" +
                    "\u0001\u0000\u0000\u0000\u00b9\u00b7\u0001\u0000\u0000\u0000\u00b9\u00ba" +
                    "\u0001\u0000\u0000\u0000\u00ba\u00bc\u0001\u0000\u0000\u0000\u00bb\u00b9" +
                    "\u0001\u0000\u0000\u0000\u00bc\u00bd\u0005T\u0000\u0000\u00bd\r\u0001" +
                    "\u0000\u0000\u0000\u00be\u00c2\u0005U\u0000\u0000\u00bf\u00c1\u0003\u0004" +
                    "\u0002\u0000\u00c0\u00bf\u0001\u0000\u0000\u0000\u00c1\u00c4\u0001\u0000" +
                    "\u0000\u0000\u00c2\u00c0\u0001\u0000\u0000\u0000\u00c2\u00c3\u0001\u0000" +
                    "\u0000\u0000\u00c3\u00c5\u0001\u0000\u0000\u0000\u00c4\u00c2\u0001\u0000" +
                    "\u0000\u0000\u00c5\u00c6\u0005V\u0000\u0000\u00c6\u000f\u0001\u0000\u0000" +
                    "\u0000\u00c7\u00c8\u0007\u0000\u0000\u0000\u00c8\u00cc\u0005\u0092\u0000" +
                    "\u0000\u00c9\u00cb\u0003\f\u0006\u0000\u00ca\u00c9\u0001\u0000\u0000\u0000" +
                    "\u00cb\u00ce\u0001\u0000\u0000\u0000\u00cc\u00ca\u0001\u0000\u0000\u0000" +
                    "\u00cc\u00cd\u0001\u0000\u0000\u0000\u00cd\u00cf\u0001\u0000\u0000\u0000" +
                    "\u00ce\u00cc\u0001\u0000\u0000\u0000\u00cf\u00d0\u0003\u000e\u0007\u0000" +
                    "\u00d0\u0011\u0001\u0000\u0000\u0000\u00d1\u00d2\u0005\u0012\u0000\u0000" +
                    "\u00d2\u00d3\u0005S\u0000\u0000\u00d3\u00d4\u00052\u0000\u0000\u00d4\u00d5" +
                    "\u0005\u0092\u0000\u0000\u00d5\u00d6\u0005O\u0000\u0000\u00d6\u00d7\u0003" +
                    "\b\u0004\u0000\u00d7\u00d8\u0005Q\u0000\u0000\u00d8\u00d9\u0005\u0092" +
                    "\u0000\u0000\u00d9\u00da\u0005\t\u0000\u0000\u00da\u00db\u0003\b\u0004" +
                    "\u0000\u00db\u00dc\u0005Q\u0000\u0000\u00dc\u00dd\u0005\u0092\u0000\u0000" +
                    "\u00dd\u00de\u0005\t\u0000\u0000\u00de\u00df\u0005T\u0000\u0000\u00df" +
                    "\u00e1\u0005U\u0000\u0000\u00e0\u00e2\u0003\u0004\u0002\u0000\u00e1\u00e0" +
                    "\u0001\u0000\u0000\u0000\u00e1\u00e2\u0001\u0000\u0000\u0000\u00e2\u00e3" +
                    "\u0001\u0000\u0000\u0000\u00e3\u00e4\u0005V\u0000\u0000\u00e4\u0013\u0001" +
                    "\u0000\u0000\u0000\u00e5\u00e7\u0003\u0016\u000b\u0000\u00e6\u00e5\u0001" +
                    "\u0000\u0000\u0000\u00e7\u00ea\u0001\u0000\u0000\u0000\u00e8\u00e6\u0001" +
                    "\u0000\u0000\u0000\u00e8\u00e9\u0001\u0000\u0000\u0000\u00e9\u00eb\u0001" +
                    "\u0000\u0000\u0000\u00ea\u00e8\u0001\u0000\u0000\u0000\u00eb\u00ef\u0003" +
                    "\u0018\f\u0000\u00ec\u00ee\u0003l6\u0000\u00ed\u00ec\u0001\u0000\u0000" +
                    "\u0000\u00ee\u00f1\u0001\u0000\u0000\u0000\u00ef\u00ed\u0001\u0000\u0000" +
                    "\u0000\u00ef\u00f0\u0001\u0000\u0000\u0000\u00f0\u00f3\u0001\u0000\u0000" +
                    "\u0000\u00f1\u00ef\u0001\u0000\u0000\u0000\u00f2\u00f4\u0003\u001c\u000e" +
                    "\u0000\u00f3\u00f2\u0001\u0000\u0000\u0000\u00f4\u00f5\u0001\u0000\u0000" +
                    "\u0000\u00f5\u00f3\u0001\u0000\u0000\u0000\u00f5\u00f6\u0001\u0000\u0000" +
                    "\u0000\u00f6\u0015\u0001\u0000\u0000\u0000\u00f7\u00f8\u0005r\u0000\u0000" +
                    "\u00f8\u00f9\u0003\u0006\u0003\u0000\u00f9\u00fa\u0005Q\u0000\u0000\u00fa" +
                    "\u0017\u0001\u0000\u0000\u0000\u00fb\u00fc\u00051\u0000\u0000\u00fc\u00fd" +
                    "\u0005\"\u0000\u0000\u00fd\u00fe\u0005S\u0000\u0000\u00fe\u00ff\u0005" +
                    "T\u0000\u0000\u00ff\u0100\u0005U\u0000\u0000\u0100\u0101\u0003\u001a\r" +
                    "\u0000\u0101\u0102\u0005V\u0000\u0000\u0102\u0019\u0001\u0000\u0000\u0000" +
                    "\u0103\u0104\u0005$\u0000\u0000\u0104\u0105\u0005S\u0000\u0000\u0105\u0106" +
                    "\u0005\u0092\u0000\u0000\u0106\u0107\u0005S\u0000\u0000\u0107\u0108\u0005" +
                    "T\u0000\u0000\u0108\u0109\u0005T\u0000\u0000\u0109\u010a\u0005Q\u0000" +
                    "\u0000\u010a\u001b\u0001\u0000\u0000\u0000\u010b\u010e\u0003\u001e\u000f" +
                    "\u0000\u010c\u010e\u0003 \u0010\u0000\u010d\u010b\u0001\u0000\u0000\u0000" +
                    "\u010d\u010c\u0001\u0000\u0000\u0000\u010e\u001d\u0001\u0000\u0000\u0000" +
                    "\u010f\u0110\u0005_\u0000\u0000\u0110\u0111\u0005\u0092\u0000\u0000\u0111" +
                    "\u0112\u0005i\u0000\u0000\u0112\u0113\u0005\u0010\u0000\u0000\u0113\u0117" +
                    "\u0005U\u0000\u0000\u0114\u0116\u0003\u0004\u0002\u0000\u0115\u0114\u0001" +
                    "\u0000\u0000\u0000\u0116\u0119\u0001\u0000\u0000\u0000\u0117\u0115\u0001" +
                    "\u0000\u0000\u0000\u0117\u0118\u0001\u0000\u0000\u0000\u0118\u011a\u0001" +
                    "\u0000\u0000\u0000\u0119\u0117\u0001\u0000\u0000\u0000\u011a\u011b\u0005" +
                    "\'\u0000\u0000\u011b\u011c\u0003,\u0016\u0000\u011c\u011d\u0005V\u0000" +
                    "\u0000\u011d\u001f\u0001\u0000\u0000\u0000\u011e\u011f\u0003\"\u0011\u0000" +
                    "\u011f\u0120\u0003(\u0014\u0000\u0120!\u0001\u0000\u0000\u0000\u0121\u0122" +
                    "\u0005_\u0000\u0000\u0122\u0123\u0005\u0092\u0000\u0000\u0123\u0124\u0005" +
                    "i\u0000\u0000\u0124\u0125\u0005\u000f\u0000\u0000\u0125\u0127\u0005U\u0000" +
                    "\u0000\u0126\u0128\u0003$\u0012\u0000\u0127\u0126\u0001\u0000\u0000\u0000" +
                    "\u0127\u0128\u0001\u0000\u0000\u0000\u0128\u0129\u0001\u0000\u0000\u0000" +
                    "\u0129\u012a\u0005\'\u0000\u0000\u012a\u012b\u0003&\u0013\u0000\u012b" +
                    "\u012c\u0005V\u0000\u0000\u012c#\u0001\u0000\u0000\u0000\u012d\u012e\u0005" +
                    "X\u0000\u0000\u012e\u012f\u0005\u0092\u0000\u0000\u012f\u0130\u0005S\u0000" +
                    "\u0000\u0130\u0131\u0005U\u0000\u0000\u0131\u0132\u0005\u000e\u0000\u0000" +
                    "\u0132\u0133\u0005\u000b\u0000\u0000\u0133\u0134\u0005\u000e\u0000\u0000" +
                    "\u0134\u0135\u0005V\u0000\u0000\u0135\u0136\u0005T\u0000\u0000\u0136\u0137" +
                    "\u0005<\u0000\u0000\u0137\u0138\u0005g\u0000\u0000\u0138\u0139\u0005S" +
                    "\u0000\u0000\u0139\u013a\u0005\u000e\u0000\u0000\u013a\u013b\u0005<\u0000" +
                    "\u0000\u013b\u013c\u0005\u000e\u0000\u0000\u013c\u013d\u0005T\u0000\u0000" +
                    "\u013d\u013e\u0005Q\u0000\u0000\u013e%\u0001\u0000\u0000\u0000\u013f\u0140" +
                    "\u0005\f\u0000\u0000\u0140\u0141\u0005\u0007\u0000\u0000\u0141\u0142\u0005" +
                    "\u0092\u0000\u0000\u0142\u0143\u0005\b\u0000\u0000\u0143\u0144\u0005\r" +
                    "\u0000\u0000\u0144\u0145\u0005S\u0000\u0000\u0145\u0146\u0005T\u0000\u0000" +
                    "\u0146\u0147\u0005I\u0000\u0000\u0147\u0148\u0005\u0092\u0000\u0000\u0148" +
                    "\u0149\u0005S\u0000\u0000\u0149\u014a\u0005T\u0000\u0000\u014a\u014b\u0005" +
                    "Q\u0000\u0000\u014b\'\u0001\u0000\u0000\u0000\u014c\u014d\u0005_\u0000" +
                    "\u0000\u014d\u014e\u0005\u0092\u0000\u0000\u014e\u014f\u0005i\u0000\u0000" +
                    "\u014f\u0150\u0005\f\u0000\u0000\u0150\u0151\u0005\u0007\u0000\u0000\u0151" +
                    "\u0152\u0005\u0092\u0000\u0000\u0152\u0153\u0005\b\u0000\u0000\u0153\u0157" +
                    "\u0005U\u0000\u0000\u0154\u0156\u0003\u0004\u0002\u0000\u0155\u0154\u0001" +
                    "\u0000\u0000\u0000\u0156\u0159\u0001\u0000\u0000\u0000\u0157\u0155\u0001" +
                    "\u0000\u0000\u0000\u0157\u0158\u0001\u0000\u0000\u0000\u0158\u015a\u0001" +
                    "\u0000\u0000\u0000\u0159\u0157\u0001\u0000\u0000\u0000\u015a\u015b\u0005" +
                    "\'\u0000\u0000\u015b\u015c\u0003*\u0015\u0000\u015c\u015d\u0005\'\u0000" +
                    "\u0000\u015d\u015e\u0003,\u0016\u0000\u015e\u015f\u0005V\u0000\u0000\u015f" +
                    ")\u0001\u0000\u0000\u0000\u0160\u0161\u00051\u0000\u0000\u0161\u0162\u0005" +
                    "\u0001\u0000\u0000\u0162\u0163\u0005S\u0000\u0000\u0163\u0164\u0005T\u0000" +
                    "\u0000\u0164\u0165\u0005U\u0000\u0000\u0165\u0166\u0005g\u0000\u0000\u0166" +
                    "\u0167\u0005=\u0000\u0000\u0167\u0168\u0005\u0001\u0000\u0000\u0168\u0169" +
                    "\u0005S\u0000\u0000\u0169\u016a\u0005T\u0000\u0000\u016a\u016b\u0005Q" +
                    "\u0000\u0000\u016b\u016c\u0005V\u0000\u0000\u016c+\u0001\u0000\u0000\u0000" +
                    "\u016d\u016e\u0005+\u0000\u0000\u016e\u016f\u0005&\u0000\u0000\u016f\u0170" +
                    "\u0005S\u0000\u0000\u0170\u0171\u0005,\u0000\u0000\u0171\u0172\u0005M" +
                    "\u0000\u0000\u0172\u0173\u0005T\u0000\u0000\u0173\u0174\u0005U\u0000\u0000" +
                    "\u0174\u0175\u0005\u0084\u0000\u0000\u0175\u0176\u0003.\u0017\u0000\u0176" +
                    "\u0177\u0005Q\u0000\u0000\u0177\u0178\u0005V\u0000\u0000\u0178-\u0001" +
                    "\u0000\u0000\u0000\u0179\u0186\u0003D\"\u0000\u017a\u0186\u0003F#\u0000" +
                    "\u017b\u0186\u0003>\u001f\u0000\u017c\u0186\u0003@ \u0000\u017d\u0186" +
                    "\u0003H$\u0000\u017e\u0186\u00032\u0019\u0000\u017f\u0186\u0003b1\u0000" +
                    "\u0180\u0186\u0003Z-\u0000\u0181\u0186\u0003R)\u0000\u0182\u0186\u0003" +
                    "r9\u0000\u0183\u0186\u0003P(\u0000\u0184\u0186\u0003T*\u0000\u0185\u0179" +
                    "\u0001\u0000\u0000\u0000\u0185\u017a\u0001\u0000\u0000\u0000\u0185\u017b" +
                    "\u0001\u0000\u0000\u0000\u0185\u017c\u0001\u0000\u0000\u0000\u0185\u017d" +
                    "\u0001\u0000\u0000\u0000\u0185\u017e\u0001\u0000\u0000\u0000\u0185\u017f" +
                    "\u0001\u0000\u0000\u0000\u0185\u0180\u0001\u0000\u0000\u0000\u0185\u0181" +
                    "\u0001\u0000\u0000\u0000\u0185\u0182\u0001\u0000\u0000\u0000\u0185\u0183" +
                    "\u0001\u0000\u0000\u0000\u0185\u0184\u0001\u0000\u0000\u0000\u0186/\u0001" +
                    "\u0000\u0000\u0000\u0187\u0188\u00058\u0000\u0000\u0188\u0189\u0005<\u0000" +
                    "\u0000\u0189\u018a\u0003.\u0017\u0000\u018a1\u0001\u0000\u0000\u0000\u018b" +
                    "\u018c\u0005\u008d\u0000\u0000\u018c\u0190\u0005S\u0000\u0000\u018d\u018e" +
                    "\u00038\u001c\u0000\u018e\u018f\u0005R\u0000\u0000\u018f\u0191\u0001\u0000" +
                    "\u0000\u0000\u0190\u018d\u0001\u0000\u0000\u0000\u0190\u0191\u0001\u0000" +
                    "\u0000\u0000\u0191\u0195\u0001\u0000\u0000\u0000\u0192\u0193\u0003:\u001d" +
                    "\u0000\u0193\u0194\u0005R\u0000\u0000\u0194\u0196\u0001\u0000\u0000\u0000" +
                    "\u0195\u0192\u0001\u0000\u0000\u0000\u0195\u0196\u0001\u0000\u0000\u0000" +
                    "\u0196\u019a\u0001\u0000\u0000\u0000\u0197\u0198\u0003<\u001e\u0000\u0198" +
                    "\u0199\u0005R\u0000\u0000\u0199\u019b\u0001\u0000\u0000\u0000\u019a\u0197" +
                    "\u0001\u0000\u0000\u0000\u019a\u019b\u0001\u0000\u0000\u0000\u019b\u019c" +
                    "\u0001\u0000\u0000\u0000\u019c\u019d\u00036\u001b\u0000\u019d\u019e\u0005" +
                    "T\u0000\u0000\u019e3\u0001\u0000\u0000\u0000\u019f\u01a0\u0005\u008e\u0000" +
                    "\u0000\u01a0\u01a1\u0005=\u0000\u0000\u01a1\u01a2\u0007\u0001\u0000\u0000" +
                    "\u01a2\u01a3\u0005S\u0000\u0000\u01a3\u01a4\u0005\u0092\u0000\u0000\u01a4" +
                    "\u01a5\u0005S\u0000\u0000\u01a5\u01a6\u0005T\u0000\u0000\u01a6\u01a7\u0005" +
                    "T\u0000\u0000\u01a7\u01a8\u0005Q\u0000\u0000\u01a85\u0001\u0000\u0000" +
                    "\u0000\u01a9\u01aa\u0005\u0091\u0000\u0000\u01aa\u01ab\u0005<\u0000\u0000" +
                    "\u01ab\u01ac\u0005\u0092\u0000\u0000\u01ac\u01ad\u0005S\u0000\u0000\u01ad" +
                    "\u01ae\u0005T\u0000\u0000\u01ae7\u0001\u0000\u0000\u0000\u01af\u01b0\u0005" +
                    "\u0002\u0000\u0000\u01b0\u01b1\u0005<\u0000\u0000\u01b1\u01b2\u0003\u0006" +
                    "\u0003\u0000\u01b29\u0001\u0000\u0000\u0000\u01b3\u01b4\u0005\u0003\u0000" +
                    "\u0000\u01b4\u01b5\u0005<\u0000\u0000\u01b5\u01b6\u0005\u0005\u0000\u0000" +
                    "\u01b6\u01b7\u0005S\u0000\u0000\u01b7\u01b8\u0005\u0006\u0000\u0000\u01b8" +
                    "\u01b9\u0005<\u0000\u0000\u01b9\u01ba\u0003h4\u0000\u01ba\u01bb\u0005" +
                    "R\u0000\u0000\u01bb\u01bc\u0005T\u0000\u0000\u01bc;\u0001\u0000\u0000" +
                    "\u0000\u01bd\u01be\u0005\u0004\u0000\u0000\u01be\u01bf\u0005<\u0000\u0000" +
                    "\u01bf\u01c0\u00055\u0000\u0000\u01c0=\u0001\u0000\u0000\u0000\u01c1\u01c2" +
                    "\u0005\u0017\u0000\u0000\u01c2\u01c8\u0005S\u0000\u0000\u01c3\u01c4\u0005" +
                    "J\u0000\u0000\u01c4\u01c5\u0005K\u0000\u0000\u01c5\u01c6\u0005=\u0000" +
                    "\u0000\u01c6\u01c7\u0005L\u0000\u0000\u01c7\u01c9\u0005R\u0000\u0000\u01c8" +
                    "\u01c3\u0001\u0000\u0000\u0000\u01c8\u01c9\u0001\u0000\u0000\u0000\u01c9" +
                    "\u01ca\u0001\u0000\u0000\u0000\u01ca\u01cb\u0003B!\u0000\u01cb\u01cc\u0005" +
                    "T\u0000\u0000\u01cc?\u0001\u0000\u0000\u0000\u01cd\u01ce\u0005\u0018\u0000" +
                    "\u0000\u01ce\u01cf\u0005S\u0000\u0000\u01cf\u01d0\u0003B!\u0000\u01d0" +
                    "\u01d1\u0005T\u0000\u0000\u01d1A\u0001\u0000\u0000\u0000\u01d2\u01d3\u0005" +
                    "\u0014\u0000\u0000\u01d3\u01d4\u0005<\u0000\u0000\u01d4\u01ec\u0005\u0015" +
                    "\u0000\u0000\u01d5\u01dd\u0003\n\u0005\u0000\u01d6\u01d7\u0005R\u0000" +
                    "\u0000\u01d7\u01d8\u0003.\u0017\u0000\u01d8\u01d9\u0005R\u0000\u0000\u01d9" +
                    "\u01da\u0003\n\u0005\u0000\u01da\u01dc\u0001\u0000\u0000\u0000\u01db\u01d6" +
                    "\u0001\u0000\u0000\u0000\u01dc\u01df\u0001\u0000\u0000\u0000\u01dd\u01db" +
                    "\u0001\u0000\u0000\u0000\u01dd\u01de\u0001\u0000\u0000\u0000\u01de\u01e1" +
                    "\u0001\u0000\u0000\u0000\u01df\u01dd\u0001\u0000\u0000\u0000\u01e0\u01d5" +
                    "\u0001\u0000\u0000\u0000\u01e0\u01e1\u0001\u0000\u0000\u0000\u01e1\u01ed" +
                    "\u0001\u0000\u0000\u0000\u01e2\u01e7\u0003.\u0017\u0000\u01e3\u01e4\u0005" +
                    "R\u0000\u0000\u01e4\u01e6\u0003.\u0017\u0000\u01e5\u01e3\u0001\u0000\u0000" +
                    "\u0000\u01e6\u01e9\u0001\u0000\u0000\u0000\u01e7\u01e5\u0001\u0000\u0000" +
                    "\u0000\u01e7\u01e8\u0001\u0000\u0000\u0000\u01e8\u01eb\u0001\u0000\u0000" +
                    "\u0000\u01e9\u01e7\u0001\u0000\u0000\u0000\u01ea\u01e2\u0001\u0000\u0000" +
                    "\u0000\u01ea\u01eb\u0001\u0000\u0000\u0000\u01eb\u01ed\u0001\u0000\u0000" +
                    "\u0000\u01ec\u01e0\u0001\u0000\u0000\u0000\u01ec\u01ea\u0001\u0000\u0000" +
                    "\u0000\u01ed\u01ee\u0001\u0000\u0000\u0000\u01ee\u01ef\u0005\u0016\u0000" +
                    "\u0000\u01efC\u0001\u0000\u0000\u0000\u01f0\u01f1\u0005\u0013\u0000\u0000" +
                    "\u01f1\u01fc\u0005S\u0000\u0000\u01f2\u01fd\u0003\u0006\u0003\u0000\u01f3" +
                    "\u01fd\u0005\u0092\u0000\u0000\u01f4\u01f5\u0005\u0092\u0000\u0000\u01f5" +
                    "\u01f6\u0005\u0015\u0000\u0000\u01f6\u01f7\u0005N\u0000\u0000\u01f7\u01f8" +
                    "\u0005\u0016\u0000\u0000\u01f8\u01f9\u0005\u0015\u0000\u0000\u01f9\u01fa" +
                    "\u0003\u0006\u0003\u0000\u01fa\u01fb\u0005\u0016\u0000\u0000\u01fb\u01fd" +
                    "\u0001\u0000\u0000\u0000\u01fc\u01f2\u0001\u0000\u0000\u0000\u01fc\u01f3" +
                    "\u0001\u0000\u0000\u0000\u01fc\u01f4\u0001\u0000\u0000\u0000\u01fd\u01fe" +
                    "\u0001\u0000\u0000\u0000\u01fe\u01ff\u0005T\u0000\u0000\u01ffE\u0001\u0000" +
                    "\u0000\u0000\u0200\u0201\u0005\u001e\u0000\u0000\u0201\u0202\u0005\u001d" +
                    "\u0000\u0000\u0202\u020d\u0005S\u0000\u0000\u0203\u020e\u0003\u0006\u0003" +
                    "\u0000\u0204\u020e\u0005\u0092\u0000\u0000\u0205\u0206\u0005\u0092\u0000" +
                    "\u0000\u0206\u0207\u0005\u0015\u0000\u0000\u0207\u0208\u0005N\u0000\u0000" +
                    "\u0208\u0209\u0005\u0016\u0000\u0000\u0209\u020a\u0005\u0015\u0000\u0000" +
                    "\u020a\u020b\u0003\u0006\u0003\u0000\u020b\u020c\u0005\u0016\u0000\u0000" +
                    "\u020c\u020e\u0001\u0000\u0000\u0000\u020d\u0203\u0001\u0000\u0000\u0000" +
                    "\u020d\u0204\u0001\u0000\u0000\u0000\u020d\u0205\u0001\u0000\u0000\u0000" +
                    "\u020e\u0214\u0001\u0000\u0000\u0000\u020f\u0210\u0005R\u0000\u0000\u0210" +
                    "\u0211\u0005\u0019\u0000\u0000\u0211\u0212\u0005\u001a\u0000\u0000\u0212" +
                    "\u0213\u0005=\u0000\u0000\u0213\u0215\u0005\u001b\u0000\u0000\u0214\u020f" +
                    "\u0001\u0000\u0000\u0000\u0214\u0215\u0001\u0000\u0000\u0000\u0215\u0216" +
                    "\u0001\u0000\u0000\u0000\u0216\u0217\u0005T\u0000\u0000\u0217G\u0001\u0000" +
                    "\u0000\u0000\u0218\u0219\u0005\n\u0000\u0000\u0219\u021d\u0005S\u0000" +
                    "\u0000\u021a\u021b\u0003J%\u0000\u021b\u021c\u0005R\u0000\u0000\u021c" +
                    "\u021e\u0001\u0000\u0000\u0000\u021d\u021a\u0001\u0000\u0000\u0000\u021d" +
                    "\u021e\u0001\u0000\u0000\u0000\u021e\u021f\u0001\u0000\u0000\u0000\u021f" +
                    "\u0220\u0003L&\u0000\u0220\u0221\u0005T\u0000\u0000\u0221I\u0001\u0000" +
                    "\u0000\u0000\u0222\u0223\u0005\u001f\u0000\u0000\u0223\u0224\u0005<\u0000" +
                    "\u0000\u0224\u0225\u0005 \u0000\u0000\u0225\u0229\u0005S\u0000\u0000\u0226" +
                    "\u0227\u0005!\u0000\u0000\u0227\u0228\u0005<\u0000\u0000\u0228\u022a\u0003" +
                    "h4\u0000\u0229\u0226\u0001\u0000\u0000\u0000\u0229\u022a\u0001\u0000\u0000" +
                    "\u0000\u022a\u022b\u0001\u0000\u0000\u0000\u022b\u022c\u0005T\u0000\u0000" +
                    "\u022cK\u0001\u0000\u0000\u0000\u022d\u022e\u0005#\u0000\u0000\u022e\u022f" +
                    "\u0005<\u0000\u0000\u022f\u0230\u0003.\u0017\u0000\u0230M\u0001\u0000" +
                    "\u0000\u0000\u0231\u0232\u0005.\u0000\u0000\u0232\u0233\u0005/\u0000\u0000" +
                    "\u0233\u0234\u00050\u0000\u0000\u0234\u0235\u0005S\u0000\u0000\u0235\u0236" +
                    "\u0005P\u0000\u0000\u0236\u0237\u0005T\u0000\u0000\u0237O\u0001\u0000" +
                    "\u0000\u0000\u0238\u0239\u0005-\u0000\u0000\u0239\u023a\u0005S\u0000\u0000" +
                    "\u023a\u023d\u0003N\'\u0000\u023b\u023c\u0005R\u0000\u0000\u023c\u023e" +
                    "\u00030\u0018\u0000\u023d\u023b\u0001\u0000\u0000\u0000\u023d\u023e\u0001" +
                    "\u0000\u0000\u0000\u023e\u023f\u0001\u0000\u0000\u0000\u023f\u0240\u0005" +
                    "T\u0000\u0000\u0240Q\u0001\u0000\u0000\u0000\u0241\u0242\u0005?\u0000" +
                    "\u0000\u0242\u0243\u0005S\u0000\u0000\u0243\u0244\u00030\u0018\u0000\u0244" +
                    "\u0245\u0005T\u0000\u0000\u0245S\u0001\u0000\u0000\u0000\u0246\u0247\u0005" +
                    "6\u0000\u0000\u0247\u024a\u0005S\u0000\u0000\u0248\u024b\u0003V+\u0000" +
                    "\u0249\u024b\u0003X,\u0000\u024a\u0248\u0001\u0000\u0000\u0000\u024a\u0249" +
                    "\u0001\u0000\u0000\u0000\u024b\u0251\u0001\u0000\u0000\u0000\u024c\u024f" +
                    "\u0005R\u0000\u0000\u024d\u0250\u0003V+\u0000\u024e\u0250\u0003X,\u0000" +
                    "\u024f\u024d\u0001\u0000\u0000\u0000\u024f\u024e\u0001\u0000\u0000\u0000" +
                    "\u0250\u0252\u0001\u0000\u0000\u0000\u0251\u024c\u0001\u0000\u0000\u0000" +
                    "\u0251\u0252\u0001\u0000\u0000\u0000\u0252\u0253\u0001\u0000\u0000\u0000" +
                    "\u0253\u0254\u0005T\u0000\u0000\u0254U\u0001\u0000\u0000\u0000\u0255\u0256" +
                    "\u00053\u0000\u0000\u0256\u0257\u0005<\u0000\u0000\u0257\u0258\u0005P" +
                    "\u0000\u0000\u0258W\u0001\u0000\u0000\u0000\u0259\u025a\u00054\u0000\u0000" +
                    "\u025a\u025b\u0005<\u0000\u0000\u025b\u025c\u0005P\u0000\u0000\u025cY" +
                    "\u0001\u0000\u0000\u0000\u025d\u025e\u0005D\u0000\u0000\u025e\u025f\u0005" +
                    "=\u0000\u0000\u025f\u0260\u0005E\u0000\u0000\u0260\u0261\u0005S\u0000" +
                    "\u0000\u0261\u0262\u0003\\.\u0000\u0262\u0263\u0003.\u0017\u0000\u0263" +
                    "\u0264\u0005R\u0000\u0000\u0264\u0265\u0003^/\u0000\u0265\u0266\u0003" +
                    ".\u0017\u0000\u0266\u0267\u0005R\u0000\u0000\u0267\u0268\u0003`0\u0000" +
                    "\u0268\u0269\u0001\u0000\u0000\u0000\u0269\u026a\u0005T\u0000\u0000\u026a" +
                    "[\u0001\u0000\u0000\u0000\u026b\u026c\u0005F\u0000\u0000\u026c\u026d\u0005" +
                    "<\u0000\u0000\u026d\u026e\u0005S\u0000\u0000\u026e\u026f\u0005M\u0000" +
                    "\u0000\u026f\u0270\u0005R\u0000\u0000\u0270\u0271\u0005N\u0000\u0000\u0271" +
                    "\u0272\u0005T\u0000\u0000\u0272\u0273\u0005I\u0000\u0000\u0273]\u0001" +
                    "\u0000\u0000\u0000\u0274\u0275\u0005G\u0000\u0000\u0275\u0276\u0005<\u0000" +
                    "\u0000\u0276\u0277\u0005S\u0000\u0000\u0277\u0278\u0005M\u0000\u0000\u0278" +
                    "\u0279\u0005R\u0000\u0000\u0279\u027a\u0005N\u0000\u0000\u027a\u027b\u0005" +
                    "T\u0000\u0000\u027b\u027c\u0005I\u0000\u0000\u027c_\u0001\u0000\u0000" +
                    "\u0000\u027d\u027e\u0005H\u0000\u0000\u027e\u027f\u0005<\u0000\u0000\u027f" +
                    "\u0286\u0005P\u0000\u0000\u0280\u0281\u0005H\u0000\u0000\u0281\u0282\u0005" +
                    "<\u0000\u0000\u0282\u0283\u0005\u0092\u0000\u0000\u0283\u0284\u0005=\u0000" +
                    "\u0000\u0284\u0286\u0005\u0092\u0000\u0000\u0285\u027d\u0001\u0000\u0000" +
                    "\u0000\u0285\u0280\u0001\u0000\u0000\u0000\u0286a\u0001\u0000\u0000\u0000" +
                    "\u0287\u0288\u00057\u0000\u0000\u0288\u028c\u0005S\u0000\u0000\u0289\u028a" +
                    "\u0003N\'\u0000\u028a\u028b\u0005R\u0000\u0000\u028b\u028d\u0001\u0000" +
                    "\u0000\u0000\u028c\u0289\u0001\u0000\u0000\u0000\u028c\u028d\u0001\u0000" +
                    "\u0000\u0000\u028d\u028f\u0001\u0000\u0000\u0000\u028e\u0290\u00030\u0018" +
                    "\u0000\u028f\u028e\u0001\u0000\u0000\u0000\u028f\u0290\u0001\u0000\u0000" +
                    "\u0000\u0290\u0291\u0001\u0000\u0000\u0000\u0291\u0293\u0005R\u0000\u0000" +
                    "\u0292\u0294\u0003j5\u0000\u0293\u0292\u0001\u0000\u0000\u0000\u0293\u0294" +
                    "\u0001\u0000\u0000\u0000\u0294\u0295\u0001\u0000\u0000\u0000\u0295\u0296" +
                    "\u0005T\u0000\u0000\u0296c\u0001\u0000\u0000\u0000\u0297\u0298\u0005A" +
                    "\u0000\u0000\u0298\u0299\u0005<\u0000\u0000\u0299\u029a\u0005>\u0000\u0000" +
                    "\u029a\u029b\u0005=\u0000\u0000\u029b\u029c\u0005@\u0000\u0000\u029c\u029d" +
                    "\u0005S\u0000\u0000\u029d\u029e\u0005P\u0000\u0000\u029e\u029f\u0005T" +
                    "\u0000\u0000\u029fe\u0001\u0000\u0000\u0000\u02a0\u02a1\u0005;\u0000\u0000" +
                    "\u02a1\u02a2\u0005<\u0000\u0000\u02a2\u02a3\u0003h4\u0000\u02a3g\u0001" +
                    "\u0000\u0000\u0000\u02a4\u02a5\u00059\u0000\u0000\u02a5\u02a6\u0005=\u0000" +
                    "\u0000\u02a6\u02a7\u0005:\u0000\u0000\u02a7i\u0001\u0000\u0000\u0000\u02a8" +
                    "\u02a9\u0005B\u0000\u0000\u02a9\u02aa\u0005<\u0000\u0000\u02aa\u02ab\u0005" +
                    "C\u0000\u0000\u02ab\u02af\u0005S\u0000\u0000\u02ac\u02ae\u0005\u001c\u0000" +
                    "\u0000\u02ad\u02ac\u0001\u0000\u0000\u0000\u02ae\u02b1\u0001\u0000\u0000" +
                    "\u0000\u02af\u02ad\u0001\u0000\u0000\u0000\u02af\u02b0\u0001\u0000\u0000" +
                    "\u0000\u02b0\u02b8\u0001\u0000\u0000\u0000\u02b1\u02af\u0001\u0000\u0000" +
                    "\u0000\u02b2\u02b9\u0003f3\u0000\u02b3\u02b4\u0003f3\u0000\u02b4\u02b5" +
                    "\u0005R\u0000\u0000\u02b5\u02b6\u0003d2\u0000\u02b6\u02b9\u0001\u0000" +
                    "\u0000\u0000\u02b7\u02b9\u0003d2\u0000\u02b8\u02b2\u0001\u0000\u0000\u0000" +
                    "\u02b8\u02b3\u0001\u0000\u0000\u0000\u02b8\u02b7\u0001\u0000\u0000\u0000" +
                    "\u02b8\u02b9\u0001\u0000\u0000\u0000\u02b9\u02bd\u0001\u0000\u0000\u0000" +
                    "\u02ba\u02bc\u0005\u001c\u0000\u0000\u02bb\u02ba\u0001\u0000\u0000\u0000" +
                    "\u02bc\u02bf\u0001\u0000\u0000\u0000\u02bd\u02bb\u0001\u0000\u0000\u0000" +
                    "\u02bd\u02be\u0001\u0000\u0000\u0000\u02be\u02c0\u0001\u0000\u0000\u0000" +
                    "\u02bf\u02bd\u0001\u0000\u0000\u0000\u02c0\u02c1\u0005T\u0000\u0000\u02c1" +
                    "k\u0001\u0000\u0000\u0000\u02c2\u02c3\u0005%\u0000\u0000\u02c3\u02c4\u0005" +
                    "\u0092\u0000\u0000\u02c4\u02c5\u0005O\u0000\u0000\u02c5\u02c6\u0005\u0015" +
                    "\u0000\u0000\u02c6\u02cb\u0003n7\u0000\u02c7\u02c8\u0005R\u0000\u0000" +
                    "\u02c8\u02ca\u0003n7\u0000\u02c9\u02c7\u0001\u0000\u0000\u0000\u02ca\u02cd" +
                    "\u0001\u0000\u0000\u0000\u02cb\u02c9\u0001\u0000\u0000\u0000\u02cb\u02cc" +
                    "\u0001\u0000\u0000\u0000\u02cc\u02ce\u0001\u0000\u0000\u0000\u02cd\u02cb" +
                    "\u0001\u0000\u0000\u0000\u02ce\u02cf\u0005\u0016\u0000\u0000\u02cfm\u0001" +
                    "\u0000\u0000\u0000\u02d0\u02d1\u0005U\u0000\u0000\u02d1\u02d6\u0003p8" +
                    "\u0000\u02d2\u02d3\u0005R\u0000\u0000\u02d3\u02d5\u0003p8\u0000\u02d4" +
                    "\u02d2\u0001\u0000\u0000\u0000\u02d5\u02d8\u0001\u0000\u0000\u0000\u02d6" +
                    "\u02d4\u0001\u0000\u0000\u0000\u02d6\u02d7\u0001\u0000\u0000\u0000\u02d7" +
                    "\u02d9\u0001\u0000\u0000\u0000\u02d8\u02d6\u0001\u0000\u0000\u0000\u02d9" +
                    "\u02da\u0005V\u0000\u0000\u02dao\u0001\u0000\u0000\u0000\u02db\u02dc\u0003" +
                    "\u0006\u0003\u0000\u02dc\u02dd\u0005<\u0000\u0000\u02dd\u02de\u0003\u0006" +
                    "\u0003\u0000\u02deq\u0001\u0000\u0000\u0000\u02df\u02e0\u0005*\u0000\u0000" +
                    "\u02e0\u02e1\u0005S\u0000\u0000\u02e1\u02e2\u0003t:\u0000\u02e2\u02e3" +
                    "\u0005R\u0000\u0000\u02e3\u02e4\u00030\u0018\u0000\u02e4\u02e5\u0005T" +
                    "\u0000\u0000\u02e5s\u0001\u0000\u0000\u0000\u02e6\u02e7\u0005)\u0000\u0000" +
                    "\u02e7\u02e8\u0005<\u0000\u0000\u02e8\u02e9\u0005S\u0000\u0000\u02e9\u02ea" +
                    "\u0005T\u0000\u0000\u02ea\u02ec\u0005U\u0000\u0000\u02eb\u02ed\u00034" +
                    "\u001a\u0000\u02ec\u02eb\u0001\u0000\u0000\u0000\u02ec\u02ed\u0001\u0000" +
                    "\u0000\u0000\u02ed\u02ef\u0001\u0000\u0000\u0000\u02ee\u02f0\u0003v;\u0000" +
                    "\u02ef\u02ee\u0001\u0000\u0000\u0000\u02ef\u02f0\u0001\u0000\u0000\u0000" +
                    "\u02f0\u02f4\u0001\u0000\u0000\u0000\u02f1\u02f3\u0003\u0010\b\u0000\u02f2" +
                    "\u02f1\u0001\u0000\u0000\u0000\u02f3\u02f6\u0001\u0000\u0000\u0000\u02f4" +
                    "\u02f2\u0001\u0000\u0000\u0000\u02f4\u02f5\u0001\u0000\u0000\u0000\u02f5" +
                    "\u02f7\u0001\u0000\u0000\u0000\u02f6\u02f4\u0001\u0000\u0000\u0000\u02f7" +
                    "\u02f8\u0005V\u0000\u0000\u02f8u\u0001\u0000\u0000\u0000\u02f9\u02fa\u0005" +
                    "(\u0000\u0000\u02fa\u02fb\u0005S\u0000\u0000\u02fb\u02fc\u0005S\u0000" +
                    "\u0000\u02fc\u02fd\u0005T\u0000\u0000\u02fd\u0301\u0005U\u0000\u0000\u02fe" +
                    "\u0300\u0003x<\u0000\u02ff\u02fe\u0001\u0000\u0000\u0000\u0300\u0303\u0001" +
                    "\u0000\u0000\u0000\u0301\u02ff\u0001\u0000\u0000\u0000\u0301\u0302\u0001" +
                    "\u0000\u0000\u0000\u0302\u0304\u0001\u0000\u0000\u0000\u0303\u0301\u0001" +
                    "\u0000\u0000\u0000\u0304\u0305\u0005V\u0000\u0000\u0305\u0306\u0005T\u0000" +
                    "\u0000\u0306\u0307\u0005Q\u0000\u0000\u0307w\u0001\u0000\u0000\u0000\u0308" +
                    "\u0309\u0005\u0092\u0000\u0000\u0309\u0315\u0005O\u0000\u0000\u030a\u030b" +
                    "\u0005\u0092\u0000\u0000\u030b\u030c\u0005\u0015\u0000\u0000\u030c\u030d" +
                    "\u0005N\u0000\u0000\u030d\u030e\u0005\u0016\u0000\u0000\u030e\u030f\u0005" +
                    "\u0015\u0000\u0000\u030f\u0310\u0003\u0006\u0003\u0000\u0310\u0311\u0005" +
                    "\u0016\u0000\u0000\u0311\u0312\u0005Q\u0000\u0000\u0312\u0316\u0001\u0000" +
                    "\u0000\u0000\u0313\u0314\u0005\u0092\u0000\u0000\u0314\u0316\u0005Q\u0000" +
                    "\u0000\u0315\u030a\u0001\u0000\u0000\u0000\u0315\u0313\u0001\u0000\u0000" +
                    "\u0000\u0316y\u0001\u0000\u0000\u00006|~\u0085\u008a\u0090\u0094\u009b" +
                    "\u00a2\u00af\u00b2\u00b9\u00c2\u00cc\u00e1\u00e8\u00ef\u00f5\u010d\u0117" +
                    "\u0127\u0157\u0185\u0190\u0195\u019a\u01c8\u01dd\u01e0\u01e7\u01ea\u01ec" +
                    "\u01fc\u020d\u0214\u021d\u0229\u023d\u024a\u024f\u0251\u0285\u028c\u028f" +
                    "\u0293\u02af\u02b8\u02bd\u02cb\u02d6\u02ec\u02ef\u02f4\u0301\u0315";
    public static final ATN _ATN =
            new ATNDeserializer().deserialize(_serializedATN.toCharArray());
    protected static final DFA[] _decisionToDFA;
    protected static final PredictionContextCache _sharedContextCache =
            new PredictionContextCache();
    private static final String[] _LITERAL_NAMES = makeLiteralNames();
    private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
    public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

    static {
        RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION);
    }

    static {
        tokenNames = new String[_SYMBOLIC_NAMES.length];
        for (int i = 0; i < tokenNames.length; i++) {
            tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] == null) {
                tokenNames[i] = VOCABULARY.getSymbolicName(i);
            }

            if (tokenNames[i] == null) {
                tokenNames[i] = "<INVALID>";
            }
        }
    }

    static {
        _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
        for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
            _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
        }
    }

    public dartParser(TokenStream input) {
        super(input);
        _interp = new ParserATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
    }

    private static String[] makeRuleNames() {
        return new String[]{
                "prog", "file_syntax", "declear_var", "string_val", "val", "ifdart",
                "arguments", "block", "function", "for", "flutter", "imporT", "main",
                "runapp", "class", "class_less", "class_full", "class_full1", "const",
                "state", "class_full2", "initstate", "build", "widget", "child", "materialapp",
                "navigate_screen", "home", "title", "theme", "debugshowmode", "column",
                "row", "children", "text", "image", "scaffold", "appbar", "body", "padding1",
                "padding", "expanded", "sizedbox", "hieght", "width", "listview", "itb",
                "sb", "ic", "container", "bord_rad", "color", "colors", "decoration",
                "list", "object", "varible", "gestureDetector", "ontap", "setstate",
                "setstate1"
        };
    }

    private static String[] makeLiteralNames() {
        return new String[]{
                null, "'initState'", "'title'", "'theme'", "'debugShowCheckedModeBanner'",
                "'ThemeData'", "'primarySwatch'", "'<'", "'>'", null, "'Scaffold'", "'?'",
                "'State'", "'createState'", "'key'", "'StatefulWidget '", "'StatelessWidget'",
                "'forEach'", "'for'", "'Text'", "'children'", "'['", "']'", "'Column'",
                "'Row'", "'fit:'", "'BoxFit'", "'fill'", null, "'asset'", null, "'appBar'",
                "'AppBar'", "'backgroundColor'", "'main'", "'body'", "'runApp'", "'List'",
                "'build'", "'@override'", "'setState'", "'onTap'", "'GestureDetector'",
                "'Widget'", "'BuildContext'", "'Padding'", "'padding:'", "'EdgeInsets.'",
                "'all'", "'void'", null, "'height'", "'width'", null, "'SizedBox'", "'Container'",
                "'child'", "'Colors'", null, "'color'", "':'", "'.'", "'BorderRadius'",
                "'Expanded'", "'circular'", "'borderRadius'", "'decoration'", "'BoxDecoration'",
                "'ListView'", "'separated'", "'itemBuilder'", "'separatorBuilder'", "'itemCount'",
                "'=>'", "'mainAxisAlignment:'", "'MainAxisAlignment'", "'center'", "'context'",
                "'index'", "'='", null, "';'", "','", "'('", "')'", null, null, "'final'",
                "'const'", "'var'", "'async'", "'this'", "'abstract'", "'as'", "'sync'",
                "'class'", "'with'", "'static'", "'dynamic'", "'external'", "'get'",
                "'set'", "'operator'", "'super'", "'factory'", "'extends'", "'implements'",
                "'enum'", "'null'", "'throw'", "'new'", "'await'", "'deferred'", "'export'",
                "'import'", "'library'", "'part'", "'typedef'", "'is'", "'if'", "'else'",
                "'while'", "'in'", "'do'", "'switch'", "'case'", "'default'", "'rethrow'",
                "'try'", "'on'", "'catch'", "'finally'", "'return'", "'break'", "'continue'",
                "'yield'", "'show'", "'hide'", "'of'", "'assert'", "'MaterialApp'", "'GetMaterialApp'",
                "'Get'", "'to'", "'off'", "'home'"
        };
    }

    private static String[] makeSymbolicNames() {
        return new String[]{
                null, "INITSTATE", "TITLE", "THEME", "DEBUGSHOWMODE", "ThemeData", "PrimarySwatch",
                "BIGER", "SMALLER", "OPERATION", "SCAFFOLD", "Q_MARK", "STATE", "CREATSTATE",
                "KEY", "FULL", "LESS", "FOREACH", "FOR", "TEXT", "CHIS", "OPEN_PR", "CLOSE_PR",
                "COLUMN", "ROW", "FIT", "BOXFIT", "FILL", "WS", "ASSET", "IMAGE", "APPBAR2",
                "APPBAR", "BACK", "MAIN", "BODY", "RUNAPP", "LIST", "BUILD", "OVERRIDE",
                "SETSTATE", "ONTAP", "GestureDetector", "WIDGET", "BUILDCONTEXT", "PADDING",
                "PADDING1", "EDGE", "ALL", "VOID", "TYPE", "HEIGHT", "WIDTH", "BOOL_VAL",
                "SIZEDBOX", "CONTAINER", "CHILD", "COLORS", "COL", "COLOR", "D_DOT",
                "DOT", "BORDER2", "EXPANDED", "CIRCULAR", "BORDERRADIUS", "DECORATION",
                "BD", "LISTVIEW", "SEPARATED", "ItemBuilder", "SeparatorBuilder", "ItemCount",
                "Return", "MAINAXIS", "MAINAXIS1", "CENTER", "CONTEXT", "INDEX", "EQUAL",
                "NUM_VAL", "SIMICOLON", "COLON", "OPEN_HEAD", "CLOSE_HEAD", "OPEN_BODY",
                "CLOSE_BODY", "FINAL", "CONST", "VAR", "ASYNC", "THIS", "ABSTRACT", "AS",
                "SYNC", "CLASS", "WITH", "STATIC", "DYNAMIC", "EXTERNAL", "GET", "SET",
                "OPERATOR", "SUPER", "FACTORY", "EXTENDS", "IMPLEMENTS", "ENUM", "NULL",
                "THROW", "NEW", "AWAIT", "DEFERRED", "EXPORT", "IMPORT", "LIBRARY", "PART",
                "TYPEDEF", "IS", "IF", "ELSE", "WHILE", "IN", "DO", "SWITCH", "CASE",
                "DEFAULT", "RETHROW", "TRY", "ON", "CATCH", "FINALLY", "RETURN", "BREAK",
                "CONTINUE", "YIELD", "SHOW", "HIDE", "OF", "ASSERT", "MATERIALAPP", "GMA",
                "GET1", "TO", "OFF", "HOME", "VAR_NAME", "STRING_OPEN", "STRING_VAL",
                "STRING_CLOSE", "PRACET", "CLOSE_PRACET", "NUMBER", "HEX_NUMBER", "SingleLineString",
                "MultilineString", "IDENTIFIER_NO_DOLLAR", "IDENTIFIER"
        };
    }

    @Override
    @Deprecated
    public String[] getTokenNames() {
        return tokenNames;
    }

    @Override

    public Vocabulary getVocabulary() {
        return VOCABULARY;
    }

    @Override
    public String getGrammarFileName() {
        return "dartParser.g4";
    }

    @Override
    public String[] getRuleNames() {
        return ruleNames;
    }

    @Override
    public String getSerializedATN() {
        return _serializedATN;
    }

    @Override
    public ATN getATN() {
        return _ATN;
    }

    public final ProgContext prog() throws RecognitionException {
        ProgContext _localctx = new ProgContext(_ctx, getState());
        enterRule(_localctx, 0, RULE_prog);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(124);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        setState(124);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 0, _ctx)) {
                            case 1: {
                                setState(122);
                                file_syntax();
                            }
                            break;
                            case 2: {
                                setState(123);
                                function();
                            }
                            break;
                        }
                    }
                    setState(126);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while (_la == VOID || _la == TYPE || _la == VAR_NAME);
                setState(128);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final File_syntaxContext file_syntax() throws RecognitionException {
        File_syntaxContext _localctx = new File_syntaxContext(_ctx, getState());
        enterRule(_localctx, 2, RULE_file_syntax);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(130);
                declear_var();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Declear_varContext declear_var() throws RecognitionException {
        Declear_varContext _localctx = new Declear_varContext(_ctx, getState());
        enterRule(_localctx, 4, RULE_declear_var);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(133);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == TYPE) {
                    {
                        setState(132);
                        match(TYPE);
                    }
                }

                setState(135);
                match(VAR_NAME);
                setState(138);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == EQUAL) {
                    {
                        setState(136);
                        match(EQUAL);
                        setState(137);
                        val();
                    }
                }

                setState(148);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COLON) {
                    {
                        {
                            setState(140);
                            match(COLON);
                            setState(141);
                            match(VAR_NAME);
                            setState(144);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == EQUAL) {
                                {
                                    setState(142);
                                    match(EQUAL);
                                    setState(143);
                                    val();
                                }
                            }

                        }
                    }
                    setState(150);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(151);
                match(SIMICOLON);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final String_valContext string_val() throws RecognitionException {
        String_valContext _localctx = new String_valContext(_ctx, getState());
        enterRule(_localctx, 6, RULE_string_val);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(153);
                match(STRING_OPEN);
                setState(155);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == STRING_VAL) {
                    {
                        setState(154);
                        match(STRING_VAL);
                    }
                }

                setState(157);
                match(STRING_CLOSE);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ValContext val() throws RecognitionException {
        ValContext _localctx = new ValContext(_ctx, getState());
        enterRule(_localctx, 8, RULE_val);
        try {
            setState(162);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case STRING_OPEN:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(159);
                    string_val();
                }
                break;
                case NUM_VAL:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(160);
                    match(NUM_VAL);
                }
                break;
                case BOOL_VAL:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(161);
                    match(BOOL_VAL);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final IfdartContext ifdart() throws RecognitionException {
        IfdartContext _localctx = new IfdartContext(_ctx, getState());
        enterRule(_localctx, 10, RULE_ifdart);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(164);
                match(VAR_NAME);
                setState(165);
                match(EQUAL);
                setState(166);
                match(EQUAL);
                setState(167);
                string_val();
                setState(168);
                match(Q_MARK);
                setState(169);
                widget();
                setState(170);
                match(D_DOT);
                setState(171);
                widget();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ArgumentsContext arguments() throws RecognitionException {
        ArgumentsContext _localctx = new ArgumentsContext(_ctx, getState());
        enterRule(_localctx, 12, RULE_arguments);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(173);
                match(OPEN_HEAD);
                setState(175);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == TYPE) {
                    {
                        setState(174);
                        match(TYPE);
                    }
                }

                setState(178);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == VAR_NAME) {
                    {
                        setState(177);
                        match(VAR_NAME);
                    }
                }

                setState(185);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COLON) {
                    {
                        {
                            setState(180);
                            match(COLON);
                            setState(181);
                            match(TYPE);
                            setState(182);
                            match(VAR_NAME);
                        }
                    }
                    setState(187);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(188);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final BlockContext block() throws RecognitionException {
        BlockContext _localctx = new BlockContext(_ctx, getState());
        enterRule(_localctx, 14, RULE_block);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(190);
                match(OPEN_BODY);
                setState(194);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == TYPE || _la == VAR_NAME) {
                    {
                        {
                            setState(191);
                            declear_var();
                        }
                    }
                    setState(196);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(197);
                match(CLOSE_BODY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final FunctionContext function() throws RecognitionException {
        FunctionContext _localctx = new FunctionContext(_ctx, getState());
        enterRule(_localctx, 16, RULE_function);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(199);
                _la = _input.LA(1);
                if (!(_la == VOID || _la == TYPE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(200);
                match(VAR_NAME);
                setState(204);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == OPEN_HEAD) {
                    {
                        {
                            setState(201);
                            arguments();
                        }
                    }
                    setState(206);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(207);
                block();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ForContext for_() throws RecognitionException {
        ForContext _localctx = new ForContext(_ctx, getState());
        enterRule(_localctx, 18, RULE_for);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(209);
                match(FOR);
                setState(210);
                match(OPEN_HEAD);
                setState(211);
                match(TYPE);
                setState(212);
                match(VAR_NAME);
                setState(213);
                match(EQUAL);
                setState(214);
                val();
                setState(215);
                match(SIMICOLON);
                setState(216);
                match(VAR_NAME);
                setState(217);
                match(OPERATION);
                setState(218);
                val();
                setState(219);
                match(SIMICOLON);
                setState(220);
                match(VAR_NAME);
                setState(221);
                match(OPERATION);
                setState(222);
                match(CLOSE_HEAD);
                setState(223);
                match(OPEN_BODY);
                setState(225);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == TYPE || _la == VAR_NAME) {
                    {
                        setState(224);
                        declear_var();
                    }
                }

                setState(227);
                match(CLOSE_BODY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final FlutterContext flutter() throws RecognitionException {
        FlutterContext _localctx = new FlutterContext(_ctx, getState());
        enterRule(_localctx, 20, RULE_flutter);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(232);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == IMPORT) {
                    {
                        {
                            setState(229);
                            imporT();
                        }
                    }
                    setState(234);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(235);
                main();
                setState(239);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == LIST) {
                    {
                        {
                            setState(236);
                            list();
                        }
                    }
                    setState(241);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(243);
                _errHandler.sync(this);
                _la = _input.LA(1);
                do {
                    {
                        {
                            setState(242);
                            class_();
                        }
                    }
                    setState(245);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                } while (_la == CLASS);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ImporTContext imporT() throws RecognitionException {
        ImporTContext _localctx = new ImporTContext(_ctx, getState());
        enterRule(_localctx, 22, RULE_imporT);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(247);
                match(IMPORT);
                setState(248);
                string_val();
                setState(249);
                match(SIMICOLON);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final MainContext main() throws RecognitionException {
        MainContext _localctx = new MainContext(_ctx, getState());
        enterRule(_localctx, 24, RULE_main);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(251);
                match(VOID);
                setState(252);
                match(MAIN);
                setState(253);
                match(OPEN_HEAD);
                setState(254);
                match(CLOSE_HEAD);
                setState(255);
                match(OPEN_BODY);
                setState(256);
                runapp();
                setState(257);
                match(CLOSE_BODY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RunappContext runapp() throws RecognitionException {
        RunappContext _localctx = new RunappContext(_ctx, getState());
        enterRule(_localctx, 26, RULE_runapp);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(259);
                match(RUNAPP);
                setState(260);
                match(OPEN_HEAD);
                setState(261);
                match(VAR_NAME);
                setState(262);
                match(OPEN_HEAD);
                setState(263);
                match(CLOSE_HEAD);
                setState(264);
                match(CLOSE_HEAD);
                setState(265);
                match(SIMICOLON);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ClassContext class_() throws RecognitionException {
        ClassContext _localctx = new ClassContext(_ctx, getState());
        enterRule(_localctx, 28, RULE_class);
        try {
            setState(269);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 17, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(267);
                    class_less();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(268);
                    class_full();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Class_lessContext class_less() throws RecognitionException {
        Class_lessContext _localctx = new Class_lessContext(_ctx, getState());
        enterRule(_localctx, 30, RULE_class_less);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(271);
                match(CLASS);
                setState(272);
                match(VAR_NAME);
                setState(273);
                match(EXTENDS);
                setState(274);
                match(LESS);
                setState(275);
                match(OPEN_BODY);
                setState(279);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == TYPE || _la == VAR_NAME) {
                    {
                        {
                            setState(276);
                            declear_var();
                        }
                    }
                    setState(281);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(282);
                match(OVERRIDE);
                setState(283);
                build();
                setState(284);
                match(CLOSE_BODY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Class_fullContext class_full() throws RecognitionException {
        Class_fullContext _localctx = new Class_fullContext(_ctx, getState());
        enterRule(_localctx, 32, RULE_class_full);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(286);
                class_full1();
                setState(287);
                class_full2();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Class_full1Context class_full1() throws RecognitionException {
        Class_full1Context _localctx = new Class_full1Context(_ctx, getState());
        enterRule(_localctx, 34, RULE_class_full1);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(289);
                match(CLASS);
                setState(290);
                match(VAR_NAME);
                setState(291);
                match(EXTENDS);
                setState(292);
                match(FULL);
                setState(293);
                match(OPEN_BODY);
                setState(295);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == CONST) {
                    {
                        setState(294);
                        const_();
                    }
                }

                setState(297);
                match(OVERRIDE);
                setState(298);
                state();
                setState(299);
                match(CLOSE_BODY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ConstContext const_() throws RecognitionException {
        ConstContext _localctx = new ConstContext(_ctx, getState());
        enterRule(_localctx, 36, RULE_const);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(301);
                match(CONST);
                setState(302);
                match(VAR_NAME);
                setState(303);
                match(OPEN_HEAD);
                setState(304);
                match(OPEN_BODY);
                setState(305);
                match(KEY);
                setState(306);
                match(Q_MARK);
                setState(307);
                match(KEY);
                setState(308);
                match(CLOSE_BODY);
                setState(309);
                match(CLOSE_HEAD);
                setState(310);
                match(D_DOT);
                setState(311);
                match(SUPER);
                setState(312);
                match(OPEN_HEAD);
                setState(313);
                match(KEY);
                setState(314);
                match(D_DOT);
                setState(315);
                match(KEY);
                setState(316);
                match(CLOSE_HEAD);
                setState(317);
                match(SIMICOLON);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final StateContext state() throws RecognitionException {
        StateContext _localctx = new StateContext(_ctx, getState());
        enterRule(_localctx, 38, RULE_state);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(319);
                match(STATE);
                setState(320);
                match(BIGER);
                setState(321);
                match(VAR_NAME);
                setState(322);
                match(SMALLER);
                setState(323);
                match(CREATSTATE);
                setState(324);
                match(OPEN_HEAD);
                setState(325);
                match(CLOSE_HEAD);
                setState(326);
                match(Return);
                setState(327);
                match(VAR_NAME);
                setState(328);
                match(OPEN_HEAD);
                setState(329);
                match(CLOSE_HEAD);
                setState(330);
                match(SIMICOLON);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Class_full2Context class_full2() throws RecognitionException {
        Class_full2Context _localctx = new Class_full2Context(_ctx, getState());
        enterRule(_localctx, 40, RULE_class_full2);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(332);
                match(CLASS);
                setState(333);
                match(VAR_NAME);
                setState(334);
                match(EXTENDS);
                setState(335);
                match(STATE);
                setState(336);
                match(BIGER);
                setState(337);
                match(VAR_NAME);
                setState(338);
                match(SMALLER);
                setState(339);
                match(OPEN_BODY);
                setState(343);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == TYPE || _la == VAR_NAME) {
                    {
                        {
                            setState(340);
                            declear_var();
                        }
                    }
                    setState(345);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(346);
                match(OVERRIDE);
                setState(347);
                initstate();
                setState(348);
                match(OVERRIDE);
                setState(349);
                build();
                setState(350);
                match(CLOSE_BODY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final InitstateContext initstate() throws RecognitionException {
        InitstateContext _localctx = new InitstateContext(_ctx, getState());
        enterRule(_localctx, 42, RULE_initstate);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(352);
                match(VOID);
                setState(353);
                match(INITSTATE);
                setState(354);
                match(OPEN_HEAD);
                setState(355);
                match(CLOSE_HEAD);
                setState(356);
                match(OPEN_BODY);
                setState(357);
                match(SUPER);
                setState(358);
                match(DOT);
                setState(359);
                match(INITSTATE);
                setState(360);
                match(OPEN_HEAD);
                setState(361);
                match(CLOSE_HEAD);
                setState(362);
                match(SIMICOLON);
                setState(363);
                match(CLOSE_BODY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final BuildContext build() throws RecognitionException {
        BuildContext _localctx = new BuildContext(_ctx, getState());
        enterRule(_localctx, 44, RULE_build);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(365);
                match(WIDGET);
                setState(366);
                match(BUILD);
                setState(367);
                match(OPEN_HEAD);
                setState(368);
                match(BUILDCONTEXT);
                setState(369);
                match(CONTEXT);
                setState(370);
                match(CLOSE_HEAD);
                setState(371);
                match(OPEN_BODY);
                setState(372);
                match(RETURN);
                setState(373);
                widget();
                setState(374);
                match(SIMICOLON);
                setState(375);
                match(CLOSE_BODY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final WidgetContext widget() throws RecognitionException {
        WidgetContext _localctx = new WidgetContext(_ctx, getState());
        enterRule(_localctx, 46, RULE_widget);
        try {
            setState(389);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case TEXT:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(377);
                    text();
                }
                break;
                case IMAGE:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(378);
                    image();
                }
                break;
                case COLUMN:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(379);
                    column();
                }
                break;
                case ROW:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(380);
                    row();
                }
                break;
                case SCAFFOLD:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(381);
                    scaffold();
                }
                break;
                case GMA:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(382);
                    materialapp();
                }
                break;
                case CONTAINER:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(383);
                    container();
                }
                break;
                case LISTVIEW:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(384);
                    listview();
                }
                break;
                case EXPANDED:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(385);
                    expanded();
                }
                break;
                case GestureDetector:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(386);
                    gestureDetector();
                }
                break;
                case PADDING:
                    enterOuterAlt(_localctx, 11);
                {
                    setState(387);
                    padding();
                }
                break;
                case SIZEDBOX:
                    enterOuterAlt(_localctx, 12);
                {
                    setState(388);
                    sizedbox();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ChildContext child() throws RecognitionException {
        ChildContext _localctx = new ChildContext(_ctx, getState());
        enterRule(_localctx, 48, RULE_child);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(391);
                match(CHILD);
                setState(392);
                match(D_DOT);
                setState(393);
                widget();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final MaterialappContext materialapp() throws RecognitionException {
        MaterialappContext _localctx = new MaterialappContext(_ctx, getState());
        enterRule(_localctx, 50, RULE_materialapp);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(395);
                match(GMA);
                setState(396);
                match(OPEN_HEAD);
                setState(400);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == TITLE) {
                    {
                        setState(397);
                        title();
                        setState(398);
                        match(COLON);
                    }
                }

                setState(405);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == THEME) {
                    {
                        setState(402);
                        theme();
                        setState(403);
                        match(COLON);
                    }
                }

                setState(410);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == DEBUGSHOWMODE) {
                    {
                        setState(407);
                        debugshowmode();
                        setState(408);
                        match(COLON);
                    }
                }

                setState(412);
                home();
                setState(413);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Navigate_screenContext navigate_screen() throws RecognitionException {
        Navigate_screenContext _localctx = new Navigate_screenContext(_ctx, getState());
        enterRule(_localctx, 52, RULE_navigate_screen);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(415);
                match(GET1);
                setState(416);
                match(DOT);
                setState(417);
                _la = _input.LA(1);
                if (!(_la == TO || _la == OFF)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
                setState(418);
                match(OPEN_HEAD);
                setState(419);
                match(VAR_NAME);
                setState(420);
                match(OPEN_HEAD);
                setState(421);
                match(CLOSE_HEAD);
                setState(422);
                match(CLOSE_HEAD);
                setState(423);
                match(SIMICOLON);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final HomeContext home() throws RecognitionException {
        HomeContext _localctx = new HomeContext(_ctx, getState());
        enterRule(_localctx, 54, RULE_home);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(425);
                match(HOME);
                setState(426);
                match(D_DOT);
                setState(427);
                match(VAR_NAME);
                setState(428);
                match(OPEN_HEAD);
                setState(429);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final TitleContext title() throws RecognitionException {
        TitleContext _localctx = new TitleContext(_ctx, getState());
        enterRule(_localctx, 56, RULE_title);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(431);
                match(TITLE);
                setState(432);
                match(D_DOT);
                setState(433);
                string_val();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ThemeContext theme() throws RecognitionException {
        ThemeContext _localctx = new ThemeContext(_ctx, getState());
        enterRule(_localctx, 58, RULE_theme);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(435);
                match(THEME);
                setState(436);
                match(D_DOT);
                setState(437);
                match(ThemeData);
                setState(438);
                match(OPEN_HEAD);
                setState(439);
                match(PrimarySwatch);
                setState(440);
                match(D_DOT);
                setState(441);
                colors();
                setState(442);
                match(COLON);
                setState(443);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final DebugshowmodeContext debugshowmode() throws RecognitionException {
        DebugshowmodeContext _localctx = new DebugshowmodeContext(_ctx, getState());
        enterRule(_localctx, 60, RULE_debugshowmode);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(445);
                match(DEBUGSHOWMODE);
                setState(446);
                match(D_DOT);
                setState(447);
                match(BOOL_VAL);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ColumnContext column() throws RecognitionException {
        ColumnContext _localctx = new ColumnContext(_ctx, getState());
        enterRule(_localctx, 62, RULE_column);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(449);
                match(COLUMN);
                setState(450);
                match(OPEN_HEAD);
                setState(456);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == MAINAXIS) {
                    {
                        setState(451);
                        match(MAINAXIS);
                        setState(452);
                        match(MAINAXIS1);
                        setState(453);
                        match(DOT);
                        setState(454);
                        match(CENTER);
                        setState(455);
                        match(COLON);
                    }
                }

                setState(458);
                children();
                setState(459);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RowContext row() throws RecognitionException {
        RowContext _localctx = new RowContext(_ctx, getState());
        enterRule(_localctx, 64, RULE_row);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(461);
                match(ROW);
                setState(462);
                match(OPEN_HEAD);
                setState(463);
                children();
                setState(464);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ChildrenContext children() throws RecognitionException {
        ChildrenContext _localctx = new ChildrenContext(_ctx, getState());
        enterRule(_localctx, 66, RULE_children);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(466);
                match(CHIS);
                setState(467);
                match(D_DOT);
                setState(468);
                match(OPEN_PR);
                setState(492);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 30, _ctx)) {
                    case 1: {
                        setState(480);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == VAR_NAME) {
                            {
                                setState(469);
                                ifdart();
                                setState(477);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == COLON) {
                                    {
                                        {
                                            setState(470);
                                            match(COLON);
                                            setState(471);
                                            widget();
                                            setState(472);
                                            match(COLON);
                                            setState(473);
                                            ifdart();
                                        }
                                    }
                                    setState(479);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                            }
                        }

                    }
                    break;
                    case 2: {
                        setState(490);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (SCAFFOLD - 10)) | (1L << (TEXT - 10)) | (1L << (COLUMN - 10)) | (1L << (ROW - 10)) | (1L << (IMAGE - 10)) | (1L << (GestureDetector - 10)) | (1L << (PADDING - 10)) | (1L << (SIZEDBOX - 10)) | (1L << (CONTAINER - 10)) | (1L << (EXPANDED - 10)) | (1L << (LISTVIEW - 10)))) != 0) || _la == GMA) {
                            {
                                setState(482);
                                widget();
                                setState(487);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == COLON) {
                                    {
                                        {
                                            setState(483);
                                            match(COLON);
                                            setState(484);
                                            widget();
                                        }
                                    }
                                    setState(489);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                            }
                        }

                    }
                    break;
                }
                setState(494);
                match(CLOSE_PR);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final TextContext text() throws RecognitionException {
        TextContext _localctx = new TextContext(_ctx, getState());
        enterRule(_localctx, 68, RULE_text);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(496);
                match(TEXT);
                setState(497);
                match(OPEN_HEAD);
                setState(508);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 31, _ctx)) {
                    case 1: {
                        setState(498);
                        string_val();
                    }
                    break;
                    case 2: {
                        setState(499);
                        match(VAR_NAME);
                    }
                    break;
                    case 3: {
                        setState(500);
                        match(VAR_NAME);
                        setState(501);
                        match(OPEN_PR);
                        setState(502);
                        match(INDEX);
                        setState(503);
                        match(CLOSE_PR);
                        setState(504);
                        match(OPEN_PR);
                        setState(505);
                        string_val();
                        setState(506);
                        match(CLOSE_PR);
                    }
                    break;
                }
                setState(510);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ImageContext image() throws RecognitionException {
        ImageContext _localctx = new ImageContext(_ctx, getState());
        enterRule(_localctx, 70, RULE_image);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(512);
                match(IMAGE);
                setState(513);
                match(ASSET);
                setState(514);
                match(OPEN_HEAD);
                setState(525);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 32, _ctx)) {
                    case 1: {
                        setState(515);
                        string_val();
                    }
                    break;
                    case 2: {
                        setState(516);
                        match(VAR_NAME);
                    }
                    break;
                    case 3: {
                        setState(517);
                        match(VAR_NAME);
                        setState(518);
                        match(OPEN_PR);
                        setState(519);
                        match(INDEX);
                        setState(520);
                        match(CLOSE_PR);
                        setState(521);
                        match(OPEN_PR);
                        setState(522);
                        string_val();
                        setState(523);
                        match(CLOSE_PR);
                    }
                    break;
                }
                setState(532);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == COLON) {
                    {
                        setState(527);
                        match(COLON);
                        setState(528);
                        match(FIT);
                        setState(529);
                        match(BOXFIT);
                        setState(530);
                        match(DOT);
                        setState(531);
                        match(FILL);
                    }
                }

                setState(534);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ScaffoldContext scaffold() throws RecognitionException {
        ScaffoldContext _localctx = new ScaffoldContext(_ctx, getState());
        enterRule(_localctx, 72, RULE_scaffold);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(536);
                match(SCAFFOLD);
                setState(537);
                match(OPEN_HEAD);
                setState(541);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == APPBAR2) {
                    {
                        setState(538);
                        appbar();
                        setState(539);
                        match(COLON);
                    }
                }

                setState(543);
                body();
                setState(544);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final AppbarContext appbar() throws RecognitionException {
        AppbarContext _localctx = new AppbarContext(_ctx, getState());
        enterRule(_localctx, 74, RULE_appbar);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(546);
                match(APPBAR2);
                setState(547);
                match(D_DOT);
                setState(548);
                match(APPBAR);
                setState(549);
                match(OPEN_HEAD);
                setState(553);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == BACK) {
                    {
                        setState(550);
                        match(BACK);
                        setState(551);
                        match(D_DOT);
                        setState(552);
                        colors();
                    }
                }

                setState(555);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final BodyContext body() throws RecognitionException {
        BodyContext _localctx = new BodyContext(_ctx, getState());
        enterRule(_localctx, 76, RULE_body);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(557);
                match(BODY);
                setState(558);
                match(D_DOT);
                setState(559);
                widget();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Padding1Context padding1() throws RecognitionException {
        Padding1Context _localctx = new Padding1Context(_ctx, getState());
        enterRule(_localctx, 78, RULE_padding1);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(561);
                match(PADDING1);
                setState(562);
                match(EDGE);
                setState(563);
                match(ALL);
                setState(564);
                match(OPEN_HEAD);
                setState(565);
                match(NUM_VAL);
                setState(566);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PaddingContext padding() throws RecognitionException {
        PaddingContext _localctx = new PaddingContext(_ctx, getState());
        enterRule(_localctx, 80, RULE_padding);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(568);
                match(PADDING);
                setState(569);
                match(OPEN_HEAD);
                setState(570);
                padding1();
                setState(573);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == COLON) {
                    {
                        setState(571);
                        match(COLON);
                        setState(572);
                        child();
                    }
                }

                setState(575);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ExpandedContext expanded() throws RecognitionException {
        ExpandedContext _localctx = new ExpandedContext(_ctx, getState());
        enterRule(_localctx, 82, RULE_expanded);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(577);
                match(EXPANDED);
                setState(578);
                match(OPEN_HEAD);
                setState(579);
                child();
                setState(580);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SizedboxContext sizedbox() throws RecognitionException {
        SizedboxContext _localctx = new SizedboxContext(_ctx, getState());
        enterRule(_localctx, 84, RULE_sizedbox);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(582);
                match(SIZEDBOX);
                setState(583);
                match(OPEN_HEAD);
                setState(586);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case HEIGHT: {
                        setState(584);
                        hieght();
                    }
                    break;
                    case WIDTH: {
                        setState(585);
                        width();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(593);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == COLON) {
                    {
                        setState(588);
                        match(COLON);
                        setState(591);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case HEIGHT: {
                                setState(589);
                                hieght();
                            }
                            break;
                            case WIDTH: {
                                setState(590);
                                width();
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                }

                setState(595);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final HieghtContext hieght() throws RecognitionException {
        HieghtContext _localctx = new HieghtContext(_ctx, getState());
        enterRule(_localctx, 86, RULE_hieght);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(597);
                match(HEIGHT);
                setState(598);
                match(D_DOT);
                setState(599);
                match(NUM_VAL);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final WidthContext width() throws RecognitionException {
        WidthContext _localctx = new WidthContext(_ctx, getState());
        enterRule(_localctx, 88, RULE_width);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(601);
                match(WIDTH);
                setState(602);
                match(D_DOT);
                setState(603);
                match(NUM_VAL);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ListviewContext listview() throws RecognitionException {
        ListviewContext _localctx = new ListviewContext(_ctx, getState());
        enterRule(_localctx, 90, RULE_listview);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(605);
                match(LISTVIEW);
                setState(606);
                match(DOT);
                setState(607);
                match(SEPARATED);
                setState(608);
                match(OPEN_HEAD);
                {
                    setState(609);
                    itb();
                    setState(610);
                    widget();
                    setState(611);
                    match(COLON);
                    setState(612);
                    sb();
                    setState(613);
                    widget();
                    setState(614);
                    match(COLON);
                    setState(615);
                    ic();
                }
                setState(617);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ItbContext itb() throws RecognitionException {
        ItbContext _localctx = new ItbContext(_ctx, getState());
        enterRule(_localctx, 92, RULE_itb);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(619);
                match(ItemBuilder);
                setState(620);
                match(D_DOT);
                setState(621);
                match(OPEN_HEAD);
                setState(622);
                match(CONTEXT);
                setState(623);
                match(COLON);
                setState(624);
                match(INDEX);
                setState(625);
                match(CLOSE_HEAD);
                setState(626);
                match(Return);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SbContext sb() throws RecognitionException {
        SbContext _localctx = new SbContext(_ctx, getState());
        enterRule(_localctx, 94, RULE_sb);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(628);
                match(SeparatorBuilder);
                setState(629);
                match(D_DOT);
                setState(630);
                match(OPEN_HEAD);
                setState(631);
                match(CONTEXT);
                setState(632);
                match(COLON);
                setState(633);
                match(INDEX);
                setState(634);
                match(CLOSE_HEAD);
                setState(635);
                match(Return);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final IcContext ic() throws RecognitionException {
        IcContext _localctx = new IcContext(_ctx, getState());
        enterRule(_localctx, 96, RULE_ic);
        try {
            setState(645);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 40, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(637);
                    match(ItemCount);
                    setState(638);
                    match(D_DOT);
                    setState(639);
                    match(NUM_VAL);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(640);
                    match(ItemCount);
                    setState(641);
                    match(D_DOT);
                    setState(642);
                    match(VAR_NAME);
                    setState(643);
                    match(DOT);
                    setState(644);
                    match(VAR_NAME);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ContainerContext container() throws RecognitionException {
        ContainerContext _localctx = new ContainerContext(_ctx, getState());
        enterRule(_localctx, 98, RULE_container);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(647);
                match(CONTAINER);
                setState(648);
                match(OPEN_HEAD);
                setState(652);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == PADDING1) {
                    {
                        setState(649);
                        padding1();
                        setState(650);
                        match(COLON);
                    }
                }

                setState(655);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == CHILD) {
                    {
                        setState(654);
                        child();
                    }
                }

                setState(657);
                match(COLON);
                setState(659);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == DECORATION) {
                    {
                        setState(658);
                        decoration();
                    }
                }

                setState(661);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Bord_radContext bord_rad() throws RecognitionException {
        Bord_radContext _localctx = new Bord_radContext(_ctx, getState());
        enterRule(_localctx, 100, RULE_bord_rad);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(663);
                match(BORDERRADIUS);
                setState(664);
                match(D_DOT);
                setState(665);
                match(BORDER2);
                setState(666);
                match(DOT);
                setState(667);
                match(CIRCULAR);
                setState(668);
                match(OPEN_HEAD);
                setState(669);
                match(NUM_VAL);
                setState(670);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ColorContext color() throws RecognitionException {
        ColorContext _localctx = new ColorContext(_ctx, getState());
        enterRule(_localctx, 102, RULE_color);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(672);
                match(COLOR);
                setState(673);
                match(D_DOT);
                setState(674);
                colors();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ColorsContext colors() throws RecognitionException {
        ColorsContext _localctx = new ColorsContext(_ctx, getState());
        enterRule(_localctx, 104, RULE_colors);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(676);
                match(COLORS);
                setState(677);
                match(DOT);
                setState(678);
                match(COL);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final DecorationContext decoration() throws RecognitionException {
        DecorationContext _localctx = new DecorationContext(_ctx, getState());
        enterRule(_localctx, 106, RULE_decoration);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(680);
                match(DECORATION);
                setState(681);
                match(D_DOT);
                setState(682);
                match(BD);
                setState(683);
                match(OPEN_HEAD);
                setState(687);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 44, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(684);
                                match(WS);
                            }
                        }
                    }
                    setState(689);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 44, _ctx);
                }
                setState(696);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 45, _ctx)) {
                    case 1: {
                        setState(690);
                        color();
                    }
                    break;
                    case 2: {
                        {
                            setState(691);
                            color();
                            setState(692);
                            match(COLON);
                            setState(693);
                            bord_rad();
                        }
                    }
                    break;
                    case 3: {
                        setState(695);
                        bord_rad();
                    }
                    break;
                }
                setState(701);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == WS) {
                    {
                        {
                            setState(698);
                            match(WS);
                        }
                    }
                    setState(703);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(704);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ListContext list() throws RecognitionException {
        ListContext _localctx = new ListContext(_ctx, getState());
        enterRule(_localctx, 108, RULE_list);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(706);
                match(LIST);
                setState(707);
                match(VAR_NAME);
                setState(708);
                match(EQUAL);
                setState(709);
                match(OPEN_PR);
                setState(710);
                object();
                setState(715);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COLON) {
                    {
                        {
                            setState(711);
                            match(COLON);
                            setState(712);
                            object();
                        }
                    }
                    setState(717);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(718);
                match(CLOSE_PR);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ObjectContext object() throws RecognitionException {
        ObjectContext _localctx = new ObjectContext(_ctx, getState());
        enterRule(_localctx, 110, RULE_object);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(720);
                match(OPEN_BODY);
                setState(721);
                varible();
                setState(726);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COLON) {
                    {
                        {
                            setState(722);
                            match(COLON);
                            setState(723);
                            varible();
                        }
                    }
                    setState(728);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(729);
                match(CLOSE_BODY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final VaribleContext varible() throws RecognitionException {
        VaribleContext _localctx = new VaribleContext(_ctx, getState());
        enterRule(_localctx, 112, RULE_varible);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(731);
                string_val();
                setState(732);
                match(D_DOT);
                setState(733);
                string_val();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final GestureDetectorContext gestureDetector() throws RecognitionException {
        GestureDetectorContext _localctx = new GestureDetectorContext(_ctx, getState());
        enterRule(_localctx, 114, RULE_gestureDetector);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(735);
                match(GestureDetector);
                setState(736);
                match(OPEN_HEAD);
                setState(737);
                ontap();
                setState(738);
                match(COLON);
                setState(739);
                child();
                setState(740);
                match(CLOSE_HEAD);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final OntapContext ontap() throws RecognitionException {
        OntapContext _localctx = new OntapContext(_ctx, getState());
        enterRule(_localctx, 116, RULE_ontap);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(742);
                match(ONTAP);
                setState(743);
                match(D_DOT);
                setState(744);
                match(OPEN_HEAD);
                setState(745);
                match(CLOSE_HEAD);
                setState(746);
                match(OPEN_BODY);
                setState(748);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == GET1) {
                    {
                        setState(747);
                        navigate_screen();
                    }
                }

                setState(751);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == SETSTATE) {
                    {
                        setState(750);
                        setstate();
                    }
                }

                setState(756);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == VOID || _la == TYPE) {
                    {
                        {
                            setState(753);
                            function();
                        }
                    }
                    setState(758);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(759);
                match(CLOSE_BODY);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SetstateContext setstate() throws RecognitionException {
        SetstateContext _localctx = new SetstateContext(_ctx, getState());
        enterRule(_localctx, 118, RULE_setstate);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(761);
                match(SETSTATE);
                setState(762);
                match(OPEN_HEAD);
                setState(763);
                match(OPEN_HEAD);
                setState(764);
                match(CLOSE_HEAD);
                setState(765);
                match(OPEN_BODY);
                setState(769);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == VAR_NAME) {
                    {
                        {
                            setState(766);
                            setstate1();
                        }
                    }
                    setState(771);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(772);
                match(CLOSE_BODY);
                setState(773);
                match(CLOSE_HEAD);
                setState(774);
                match(SIMICOLON);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final Setstate1Context setstate1() throws RecognitionException {
        Setstate1Context _localctx = new Setstate1Context(_ctx, getState());
        enterRule(_localctx, 120, RULE_setstate1);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(776);
                match(VAR_NAME);
                setState(777);
                match(EQUAL);
                setState(789);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 53, _ctx)) {
                    case 1: {
                        setState(778);
                        match(VAR_NAME);
                        setState(779);
                        match(OPEN_PR);
                        setState(780);
                        match(INDEX);
                        setState(781);
                        match(CLOSE_PR);
                        setState(782);
                        match(OPEN_PR);
                        setState(783);
                        string_val();
                        setState(784);
                        match(CLOSE_PR);
                        setState(785);
                        match(SIMICOLON);
                    }
                    break;
                    case 2: {
                        setState(787);
                        match(VAR_NAME);
                        setState(788);
                        match(SIMICOLON);
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public static class ProgContext extends ParserRuleContext {
        public ProgContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode EOF() {
            return getToken(dartParser.EOF, 0);
        }

        public List<File_syntaxContext> file_syntax() {
            return getRuleContexts(File_syntaxContext.class);
        }

        public File_syntaxContext file_syntax(int i) {
            return getRuleContext(File_syntaxContext.class, i);
        }

        public List<FunctionContext> function() {
            return getRuleContexts(FunctionContext.class);
        }

        public FunctionContext function(int i) {
            return getRuleContext(FunctionContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_prog;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterProg(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitProg(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor) return ((dartParserVisitor<? extends T>) visitor).visitProg(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class File_syntaxContext extends ParserRuleContext {
        public File_syntaxContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public Declear_varContext declear_var() {
            return getRuleContext(Declear_varContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_file_syntax;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterFile_syntax(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitFile_syntax(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitFile_syntax(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class Declear_varContext extends ParserRuleContext {
        public Declear_varContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<TerminalNode> VAR_NAME() {
            return getTokens(dartParser.VAR_NAME);
        }

        public TerminalNode VAR_NAME(int i) {
            return getToken(dartParser.VAR_NAME, i);
        }

        public TerminalNode SIMICOLON() {
            return getToken(dartParser.SIMICOLON, 0);
        }

        public TerminalNode TYPE() {
            return getToken(dartParser.TYPE, 0);
        }

        public List<TerminalNode> EQUAL() {
            return getTokens(dartParser.EQUAL);
        }

        public TerminalNode EQUAL(int i) {
            return getToken(dartParser.EQUAL, i);
        }

        public List<ValContext> val() {
            return getRuleContexts(ValContext.class);
        }

        public ValContext val(int i) {
            return getRuleContext(ValContext.class, i);
        }

        public List<TerminalNode> COLON() {
            return getTokens(dartParser.COLON);
        }

        public TerminalNode COLON(int i) {
            return getToken(dartParser.COLON, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_declear_var;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterDeclear_var(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitDeclear_var(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitDeclear_var(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class String_valContext extends ParserRuleContext {
        public String_valContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode STRING_OPEN() {
            return getToken(dartParser.STRING_OPEN, 0);
        }

        public TerminalNode STRING_CLOSE() {
            return getToken(dartParser.STRING_CLOSE, 0);
        }

        public TerminalNode STRING_VAL() {
            return getToken(dartParser.STRING_VAL, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_string_val;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterString_val(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitString_val(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitString_val(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ValContext extends ParserRuleContext {
        public ValContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public String_valContext string_val() {
            return getRuleContext(String_valContext.class, 0);
        }

        public TerminalNode NUM_VAL() {
            return getToken(dartParser.NUM_VAL, 0);
        }

        public TerminalNode BOOL_VAL() {
            return getToken(dartParser.BOOL_VAL, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_val;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterVal(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitVal(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor) return ((dartParserVisitor<? extends T>) visitor).visitVal(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class IfdartContext extends ParserRuleContext {
        public IfdartContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode VAR_NAME() {
            return getToken(dartParser.VAR_NAME, 0);
        }

        public List<TerminalNode> EQUAL() {
            return getTokens(dartParser.EQUAL);
        }

        public TerminalNode EQUAL(int i) {
            return getToken(dartParser.EQUAL, i);
        }

        public String_valContext string_val() {
            return getRuleContext(String_valContext.class, 0);
        }

        public TerminalNode Q_MARK() {
            return getToken(dartParser.Q_MARK, 0);
        }

        public List<WidgetContext> widget() {
            return getRuleContexts(WidgetContext.class);
        }

        public WidgetContext widget(int i) {
            return getRuleContext(WidgetContext.class, i);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_ifdart;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterIfdart(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitIfdart(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitIfdart(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ArgumentsContext extends ParserRuleContext {
        public ArgumentsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public List<TerminalNode> TYPE() {
            return getTokens(dartParser.TYPE);
        }

        public TerminalNode TYPE(int i) {
            return getToken(dartParser.TYPE, i);
        }

        public List<TerminalNode> VAR_NAME() {
            return getTokens(dartParser.VAR_NAME);
        }

        public TerminalNode VAR_NAME(int i) {
            return getToken(dartParser.VAR_NAME, i);
        }

        public List<TerminalNode> COLON() {
            return getTokens(dartParser.COLON);
        }

        public TerminalNode COLON(int i) {
            return getToken(dartParser.COLON, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_arguments;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterArguments(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitArguments(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitArguments(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class BlockContext extends ParserRuleContext {
        public BlockContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode OPEN_BODY() {
            return getToken(dartParser.OPEN_BODY, 0);
        }

        public TerminalNode CLOSE_BODY() {
            return getToken(dartParser.CLOSE_BODY, 0);
        }

        public List<Declear_varContext> declear_var() {
            return getRuleContexts(Declear_varContext.class);
        }

        public Declear_varContext declear_var(int i) {
            return getRuleContext(Declear_varContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_block;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterBlock(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitBlock(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitBlock(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FunctionContext extends ParserRuleContext {
        public FunctionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode VAR_NAME() {
            return getToken(dartParser.VAR_NAME, 0);
        }

        public BlockContext block() {
            return getRuleContext(BlockContext.class, 0);
        }

        public TerminalNode TYPE() {
            return getToken(dartParser.TYPE, 0);
        }

        public TerminalNode VOID() {
            return getToken(dartParser.VOID, 0);
        }

        public List<ArgumentsContext> arguments() {
            return getRuleContexts(ArgumentsContext.class);
        }

        public ArgumentsContext arguments(int i) {
            return getRuleContext(ArgumentsContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_function;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterFunction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitFunction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitFunction(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ForContext extends ParserRuleContext {
        public ForContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode FOR() {
            return getToken(dartParser.FOR, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode TYPE() {
            return getToken(dartParser.TYPE, 0);
        }

        public List<TerminalNode> VAR_NAME() {
            return getTokens(dartParser.VAR_NAME);
        }

        public TerminalNode VAR_NAME(int i) {
            return getToken(dartParser.VAR_NAME, i);
        }

        public TerminalNode EQUAL() {
            return getToken(dartParser.EQUAL, 0);
        }

        public List<ValContext> val() {
            return getRuleContexts(ValContext.class);
        }

        public ValContext val(int i) {
            return getRuleContext(ValContext.class, i);
        }

        public List<TerminalNode> SIMICOLON() {
            return getTokens(dartParser.SIMICOLON);
        }

        public TerminalNode SIMICOLON(int i) {
            return getToken(dartParser.SIMICOLON, i);
        }

        public List<TerminalNode> OPERATION() {
            return getTokens(dartParser.OPERATION);
        }

        public TerminalNode OPERATION(int i) {
            return getToken(dartParser.OPERATION, i);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public TerminalNode OPEN_BODY() {
            return getToken(dartParser.OPEN_BODY, 0);
        }

        public TerminalNode CLOSE_BODY() {
            return getToken(dartParser.CLOSE_BODY, 0);
        }

        public Declear_varContext declear_var() {
            return getRuleContext(Declear_varContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_for;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterFor(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitFor(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor) return ((dartParserVisitor<? extends T>) visitor).visitFor(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FlutterContext extends ParserRuleContext {
        public FlutterContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public MainContext main() {
            return getRuleContext(MainContext.class, 0);
        }

        public List<ImporTContext> imporT() {
            return getRuleContexts(ImporTContext.class);
        }

        public ImporTContext imporT(int i) {
            return getRuleContext(ImporTContext.class, i);
        }

        public List<ListContext> list() {
            return getRuleContexts(ListContext.class);
        }

        public ListContext list(int i) {
            return getRuleContext(ListContext.class, i);
        }

        public List<ClassContext> class_() {
            return getRuleContexts(ClassContext.class);
        }

        public ClassContext class_(int i) {
            return getRuleContext(ClassContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_flutter;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterFlutter(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitFlutter(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitFlutter(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ImporTContext extends ParserRuleContext {
        public ImporTContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode IMPORT() {
            return getToken(dartParser.IMPORT, 0);
        }

        public String_valContext string_val() {
            return getRuleContext(String_valContext.class, 0);
        }

        public TerminalNode SIMICOLON() {
            return getToken(dartParser.SIMICOLON, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_imporT;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterImporT(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitImporT(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitImporT(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class MainContext extends ParserRuleContext {
        public MainContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode VOID() {
            return getToken(dartParser.VOID, 0);
        }

        public TerminalNode MAIN() {
            return getToken(dartParser.MAIN, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public TerminalNode OPEN_BODY() {
            return getToken(dartParser.OPEN_BODY, 0);
        }

        public RunappContext runapp() {
            return getRuleContext(RunappContext.class, 0);
        }

        public TerminalNode CLOSE_BODY() {
            return getToken(dartParser.CLOSE_BODY, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_main;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterMain(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitMain(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor) return ((dartParserVisitor<? extends T>) visitor).visitMain(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RunappContext extends ParserRuleContext {
        public RunappContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode RUNAPP() {
            return getToken(dartParser.RUNAPP, 0);
        }

        public List<TerminalNode> OPEN_HEAD() {
            return getTokens(dartParser.OPEN_HEAD);
        }

        public TerminalNode OPEN_HEAD(int i) {
            return getToken(dartParser.OPEN_HEAD, i);
        }

        public TerminalNode VAR_NAME() {
            return getToken(dartParser.VAR_NAME, 0);
        }

        public List<TerminalNode> CLOSE_HEAD() {
            return getTokens(dartParser.CLOSE_HEAD);
        }

        public TerminalNode CLOSE_HEAD(int i) {
            return getToken(dartParser.CLOSE_HEAD, i);
        }

        public TerminalNode SIMICOLON() {
            return getToken(dartParser.SIMICOLON, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_runapp;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterRunapp(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitRunapp(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitRunapp(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ClassContext extends ParserRuleContext {
        public ClassContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public Class_lessContext class_less() {
            return getRuleContext(Class_lessContext.class, 0);
        }

        public Class_fullContext class_full() {
            return getRuleContext(Class_fullContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_class;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterClass(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitClass(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitClass(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class Class_lessContext extends ParserRuleContext {
        public Class_lessContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode CLASS() {
            return getToken(dartParser.CLASS, 0);
        }

        public TerminalNode VAR_NAME() {
            return getToken(dartParser.VAR_NAME, 0);
        }

        public TerminalNode EXTENDS() {
            return getToken(dartParser.EXTENDS, 0);
        }

        public TerminalNode LESS() {
            return getToken(dartParser.LESS, 0);
        }

        public TerminalNode OPEN_BODY() {
            return getToken(dartParser.OPEN_BODY, 0);
        }

        public TerminalNode OVERRIDE() {
            return getToken(dartParser.OVERRIDE, 0);
        }

        public BuildContext build() {
            return getRuleContext(BuildContext.class, 0);
        }

        public TerminalNode CLOSE_BODY() {
            return getToken(dartParser.CLOSE_BODY, 0);
        }

        public List<Declear_varContext> declear_var() {
            return getRuleContexts(Declear_varContext.class);
        }

        public Declear_varContext declear_var(int i) {
            return getRuleContext(Declear_varContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_class_less;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterClass_less(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitClass_less(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitClass_less(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class Class_fullContext extends ParserRuleContext {
        public Class_fullContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public Class_full1Context class_full1() {
            return getRuleContext(Class_full1Context.class, 0);
        }

        public Class_full2Context class_full2() {
            return getRuleContext(Class_full2Context.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_class_full;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterClass_full(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitClass_full(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitClass_full(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class Class_full1Context extends ParserRuleContext {
        public Class_full1Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode CLASS() {
            return getToken(dartParser.CLASS, 0);
        }

        public TerminalNode VAR_NAME() {
            return getToken(dartParser.VAR_NAME, 0);
        }

        public TerminalNode EXTENDS() {
            return getToken(dartParser.EXTENDS, 0);
        }

        public TerminalNode FULL() {
            return getToken(dartParser.FULL, 0);
        }

        public TerminalNode OPEN_BODY() {
            return getToken(dartParser.OPEN_BODY, 0);
        }

        public TerminalNode OVERRIDE() {
            return getToken(dartParser.OVERRIDE, 0);
        }

        public StateContext state() {
            return getRuleContext(StateContext.class, 0);
        }

        public TerminalNode CLOSE_BODY() {
            return getToken(dartParser.CLOSE_BODY, 0);
        }

        public ConstContext const_() {
            return getRuleContext(ConstContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_class_full1;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterClass_full1(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitClass_full1(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitClass_full1(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ConstContext extends ParserRuleContext {
        public ConstContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode CONST() {
            return getToken(dartParser.CONST, 0);
        }

        public TerminalNode VAR_NAME() {
            return getToken(dartParser.VAR_NAME, 0);
        }

        public List<TerminalNode> OPEN_HEAD() {
            return getTokens(dartParser.OPEN_HEAD);
        }

        public TerminalNode OPEN_HEAD(int i) {
            return getToken(dartParser.OPEN_HEAD, i);
        }

        public TerminalNode OPEN_BODY() {
            return getToken(dartParser.OPEN_BODY, 0);
        }

        public List<TerminalNode> KEY() {
            return getTokens(dartParser.KEY);
        }

        public TerminalNode KEY(int i) {
            return getToken(dartParser.KEY, i);
        }

        public TerminalNode Q_MARK() {
            return getToken(dartParser.Q_MARK, 0);
        }

        public TerminalNode CLOSE_BODY() {
            return getToken(dartParser.CLOSE_BODY, 0);
        }

        public List<TerminalNode> CLOSE_HEAD() {
            return getTokens(dartParser.CLOSE_HEAD);
        }

        public TerminalNode CLOSE_HEAD(int i) {
            return getToken(dartParser.CLOSE_HEAD, i);
        }

        public List<TerminalNode> D_DOT() {
            return getTokens(dartParser.D_DOT);
        }

        public TerminalNode D_DOT(int i) {
            return getToken(dartParser.D_DOT, i);
        }

        public TerminalNode SUPER() {
            return getToken(dartParser.SUPER, 0);
        }

        public TerminalNode SIMICOLON() {
            return getToken(dartParser.SIMICOLON, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_const;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterConst(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitConst(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitConst(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class StateContext extends ParserRuleContext {
        public StateContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode STATE() {
            return getToken(dartParser.STATE, 0);
        }

        public TerminalNode BIGER() {
            return getToken(dartParser.BIGER, 0);
        }

        public List<TerminalNode> VAR_NAME() {
            return getTokens(dartParser.VAR_NAME);
        }

        public TerminalNode VAR_NAME(int i) {
            return getToken(dartParser.VAR_NAME, i);
        }

        public TerminalNode SMALLER() {
            return getToken(dartParser.SMALLER, 0);
        }

        public TerminalNode CREATSTATE() {
            return getToken(dartParser.CREATSTATE, 0);
        }

        public List<TerminalNode> OPEN_HEAD() {
            return getTokens(dartParser.OPEN_HEAD);
        }

        public TerminalNode OPEN_HEAD(int i) {
            return getToken(dartParser.OPEN_HEAD, i);
        }

        public List<TerminalNode> CLOSE_HEAD() {
            return getTokens(dartParser.CLOSE_HEAD);
        }

        public TerminalNode CLOSE_HEAD(int i) {
            return getToken(dartParser.CLOSE_HEAD, i);
        }

        public TerminalNode Return() {
            return getToken(dartParser.Return, 0);
        }

        public TerminalNode SIMICOLON() {
            return getToken(dartParser.SIMICOLON, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_state;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterState(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitState(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitState(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class Class_full2Context extends ParserRuleContext {
        public Class_full2Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode CLASS() {
            return getToken(dartParser.CLASS, 0);
        }

        public List<TerminalNode> VAR_NAME() {
            return getTokens(dartParser.VAR_NAME);
        }

        public TerminalNode VAR_NAME(int i) {
            return getToken(dartParser.VAR_NAME, i);
        }

        public TerminalNode EXTENDS() {
            return getToken(dartParser.EXTENDS, 0);
        }

        public TerminalNode STATE() {
            return getToken(dartParser.STATE, 0);
        }

        public TerminalNode BIGER() {
            return getToken(dartParser.BIGER, 0);
        }

        public TerminalNode SMALLER() {
            return getToken(dartParser.SMALLER, 0);
        }

        public TerminalNode OPEN_BODY() {
            return getToken(dartParser.OPEN_BODY, 0);
        }

        public List<TerminalNode> OVERRIDE() {
            return getTokens(dartParser.OVERRIDE);
        }

        public TerminalNode OVERRIDE(int i) {
            return getToken(dartParser.OVERRIDE, i);
        }

        public InitstateContext initstate() {
            return getRuleContext(InitstateContext.class, 0);
        }

        public BuildContext build() {
            return getRuleContext(BuildContext.class, 0);
        }

        public TerminalNode CLOSE_BODY() {
            return getToken(dartParser.CLOSE_BODY, 0);
        }

        public List<Declear_varContext> declear_var() {
            return getRuleContexts(Declear_varContext.class);
        }

        public Declear_varContext declear_var(int i) {
            return getRuleContext(Declear_varContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_class_full2;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterClass_full2(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitClass_full2(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitClass_full2(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class InitstateContext extends ParserRuleContext {
        public InitstateContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode VOID() {
            return getToken(dartParser.VOID, 0);
        }

        public List<TerminalNode> INITSTATE() {
            return getTokens(dartParser.INITSTATE);
        }

        public TerminalNode INITSTATE(int i) {
            return getToken(dartParser.INITSTATE, i);
        }

        public List<TerminalNode> OPEN_HEAD() {
            return getTokens(dartParser.OPEN_HEAD);
        }

        public TerminalNode OPEN_HEAD(int i) {
            return getToken(dartParser.OPEN_HEAD, i);
        }

        public List<TerminalNode> CLOSE_HEAD() {
            return getTokens(dartParser.CLOSE_HEAD);
        }

        public TerminalNode CLOSE_HEAD(int i) {
            return getToken(dartParser.CLOSE_HEAD, i);
        }

        public TerminalNode OPEN_BODY() {
            return getToken(dartParser.OPEN_BODY, 0);
        }

        public TerminalNode SUPER() {
            return getToken(dartParser.SUPER, 0);
        }

        public TerminalNode DOT() {
            return getToken(dartParser.DOT, 0);
        }

        public TerminalNode SIMICOLON() {
            return getToken(dartParser.SIMICOLON, 0);
        }

        public TerminalNode CLOSE_BODY() {
            return getToken(dartParser.CLOSE_BODY, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_initstate;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterInitstate(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitInitstate(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitInitstate(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class BuildContext extends ParserRuleContext {
        public BuildContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode WIDGET() {
            return getToken(dartParser.WIDGET, 0);
        }

        public TerminalNode BUILD() {
            return getToken(dartParser.BUILD, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode BUILDCONTEXT() {
            return getToken(dartParser.BUILDCONTEXT, 0);
        }

        public TerminalNode CONTEXT() {
            return getToken(dartParser.CONTEXT, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public TerminalNode OPEN_BODY() {
            return getToken(dartParser.OPEN_BODY, 0);
        }

        public TerminalNode RETURN() {
            return getToken(dartParser.RETURN, 0);
        }

        public WidgetContext widget() {
            return getRuleContext(WidgetContext.class, 0);
        }

        public TerminalNode SIMICOLON() {
            return getToken(dartParser.SIMICOLON, 0);
        }

        public TerminalNode CLOSE_BODY() {
            return getToken(dartParser.CLOSE_BODY, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_build;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterBuild(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitBuild(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitBuild(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class WidgetContext extends ParserRuleContext {
        public WidgetContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TextContext text() {
            return getRuleContext(TextContext.class, 0);
        }

        public ImageContext image() {
            return getRuleContext(ImageContext.class, 0);
        }

        public ColumnContext column() {
            return getRuleContext(ColumnContext.class, 0);
        }

        public RowContext row() {
            return getRuleContext(RowContext.class, 0);
        }

        public ScaffoldContext scaffold() {
            return getRuleContext(ScaffoldContext.class, 0);
        }

        public MaterialappContext materialapp() {
            return getRuleContext(MaterialappContext.class, 0);
        }

        public ContainerContext container() {
            return getRuleContext(ContainerContext.class, 0);
        }

        public ListviewContext listview() {
            return getRuleContext(ListviewContext.class, 0);
        }

        public ExpandedContext expanded() {
            return getRuleContext(ExpandedContext.class, 0);
        }

        public GestureDetectorContext gestureDetector() {
            return getRuleContext(GestureDetectorContext.class, 0);
        }

        public PaddingContext padding() {
            return getRuleContext(PaddingContext.class, 0);
        }

        public SizedboxContext sizedbox() {
            return getRuleContext(SizedboxContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_widget;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterWidget(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitWidget(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitWidget(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ChildContext extends ParserRuleContext {
        public ChildContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode CHILD() {
            return getToken(dartParser.CHILD, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public WidgetContext widget() {
            return getRuleContext(WidgetContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_child;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterChild(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitChild(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitChild(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class MaterialappContext extends ParserRuleContext {
        public MaterialappContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode GMA() {
            return getToken(dartParser.GMA, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public HomeContext home() {
            return getRuleContext(HomeContext.class, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public TitleContext title() {
            return getRuleContext(TitleContext.class, 0);
        }

        public List<TerminalNode> COLON() {
            return getTokens(dartParser.COLON);
        }

        public TerminalNode COLON(int i) {
            return getToken(dartParser.COLON, i);
        }

        public ThemeContext theme() {
            return getRuleContext(ThemeContext.class, 0);
        }

        public DebugshowmodeContext debugshowmode() {
            return getRuleContext(DebugshowmodeContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_materialapp;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterMaterialapp(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitMaterialapp(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitMaterialapp(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class Navigate_screenContext extends ParserRuleContext {
        public Navigate_screenContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode GET1() {
            return getToken(dartParser.GET1, 0);
        }

        public TerminalNode DOT() {
            return getToken(dartParser.DOT, 0);
        }

        public List<TerminalNode> OPEN_HEAD() {
            return getTokens(dartParser.OPEN_HEAD);
        }

        public TerminalNode OPEN_HEAD(int i) {
            return getToken(dartParser.OPEN_HEAD, i);
        }

        public TerminalNode VAR_NAME() {
            return getToken(dartParser.VAR_NAME, 0);
        }

        public List<TerminalNode> CLOSE_HEAD() {
            return getTokens(dartParser.CLOSE_HEAD);
        }

        public TerminalNode CLOSE_HEAD(int i) {
            return getToken(dartParser.CLOSE_HEAD, i);
        }

        public TerminalNode SIMICOLON() {
            return getToken(dartParser.SIMICOLON, 0);
        }

        public TerminalNode TO() {
            return getToken(dartParser.TO, 0);
        }

        public TerminalNode OFF() {
            return getToken(dartParser.OFF, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_navigate_screen;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterNavigate_screen(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitNavigate_screen(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitNavigate_screen(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class HomeContext extends ParserRuleContext {
        public HomeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode HOME() {
            return getToken(dartParser.HOME, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public TerminalNode VAR_NAME() {
            return getToken(dartParser.VAR_NAME, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_home;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterHome(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitHome(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor) return ((dartParserVisitor<? extends T>) visitor).visitHome(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TitleContext extends ParserRuleContext {
        public TitleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode TITLE() {
            return getToken(dartParser.TITLE, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public String_valContext string_val() {
            return getRuleContext(String_valContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_title;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterTitle(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitTitle(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitTitle(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ThemeContext extends ParserRuleContext {
        public ThemeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode THEME() {
            return getToken(dartParser.THEME, 0);
        }

        public List<TerminalNode> D_DOT() {
            return getTokens(dartParser.D_DOT);
        }

        public TerminalNode D_DOT(int i) {
            return getToken(dartParser.D_DOT, i);
        }

        public TerminalNode ThemeData() {
            return getToken(dartParser.ThemeData, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode PrimarySwatch() {
            return getToken(dartParser.PrimarySwatch, 0);
        }

        public ColorsContext colors() {
            return getRuleContext(ColorsContext.class, 0);
        }

        public TerminalNode COLON() {
            return getToken(dartParser.COLON, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_theme;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterTheme(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitTheme(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitTheme(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DebugshowmodeContext extends ParserRuleContext {
        public DebugshowmodeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode DEBUGSHOWMODE() {
            return getToken(dartParser.DEBUGSHOWMODE, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public TerminalNode BOOL_VAL() {
            return getToken(dartParser.BOOL_VAL, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_debugshowmode;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterDebugshowmode(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitDebugshowmode(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitDebugshowmode(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ColumnContext extends ParserRuleContext {
        public ColumnContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode COLUMN() {
            return getToken(dartParser.COLUMN, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public ChildrenContext children() {
            return getRuleContext(ChildrenContext.class, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public TerminalNode MAINAXIS() {
            return getToken(dartParser.MAINAXIS, 0);
        }

        public TerminalNode MAINAXIS1() {
            return getToken(dartParser.MAINAXIS1, 0);
        }

        public TerminalNode DOT() {
            return getToken(dartParser.DOT, 0);
        }

        public TerminalNode CENTER() {
            return getToken(dartParser.CENTER, 0);
        }

        public TerminalNode COLON() {
            return getToken(dartParser.COLON, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_column;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RowContext extends ParserRuleContext {
        public RowContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode ROW() {
            return getToken(dartParser.ROW, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public ChildrenContext children() {
            return getRuleContext(ChildrenContext.class, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_row;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterRow(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitRow(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor) return ((dartParserVisitor<? extends T>) visitor).visitRow(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ChildrenContext extends ParserRuleContext {
        public ChildrenContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode CHIS() {
            return getToken(dartParser.CHIS, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public TerminalNode OPEN_PR() {
            return getToken(dartParser.OPEN_PR, 0);
        }

        public TerminalNode CLOSE_PR() {
            return getToken(dartParser.CLOSE_PR, 0);
        }

        public List<IfdartContext> ifdart() {
            return getRuleContexts(IfdartContext.class);
        }

        public IfdartContext ifdart(int i) {
            return getRuleContext(IfdartContext.class, i);
        }

        public List<WidgetContext> widget() {
            return getRuleContexts(WidgetContext.class);
        }

        public WidgetContext widget(int i) {
            return getRuleContext(WidgetContext.class, i);
        }

        public List<TerminalNode> COLON() {
            return getTokens(dartParser.COLON);
        }

        public TerminalNode COLON(int i) {
            return getToken(dartParser.COLON, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_children;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterChildren(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitChildren(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitChildren(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TextContext extends ParserRuleContext {
        public TextContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode TEXT() {
            return getToken(dartParser.TEXT, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public String_valContext string_val() {
            return getRuleContext(String_valContext.class, 0);
        }

        public TerminalNode VAR_NAME() {
            return getToken(dartParser.VAR_NAME, 0);
        }

        public List<TerminalNode> OPEN_PR() {
            return getTokens(dartParser.OPEN_PR);
        }

        public TerminalNode OPEN_PR(int i) {
            return getToken(dartParser.OPEN_PR, i);
        }

        public TerminalNode INDEX() {
            return getToken(dartParser.INDEX, 0);
        }

        public List<TerminalNode> CLOSE_PR() {
            return getTokens(dartParser.CLOSE_PR);
        }

        public TerminalNode CLOSE_PR(int i) {
            return getToken(dartParser.CLOSE_PR, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_text;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterText(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitText(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor) return ((dartParserVisitor<? extends T>) visitor).visitText(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ImageContext extends ParserRuleContext {
        public ImageContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode IMAGE() {
            return getToken(dartParser.IMAGE, 0);
        }

        public TerminalNode ASSET() {
            return getToken(dartParser.ASSET, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public String_valContext string_val() {
            return getRuleContext(String_valContext.class, 0);
        }

        public TerminalNode VAR_NAME() {
            return getToken(dartParser.VAR_NAME, 0);
        }

        public List<TerminalNode> OPEN_PR() {
            return getTokens(dartParser.OPEN_PR);
        }

        public TerminalNode OPEN_PR(int i) {
            return getToken(dartParser.OPEN_PR, i);
        }

        public TerminalNode INDEX() {
            return getToken(dartParser.INDEX, 0);
        }

        public List<TerminalNode> CLOSE_PR() {
            return getTokens(dartParser.CLOSE_PR);
        }

        public TerminalNode CLOSE_PR(int i) {
            return getToken(dartParser.CLOSE_PR, i);
        }

        public TerminalNode COLON() {
            return getToken(dartParser.COLON, 0);
        }

        public TerminalNode FIT() {
            return getToken(dartParser.FIT, 0);
        }

        public TerminalNode BOXFIT() {
            return getToken(dartParser.BOXFIT, 0);
        }

        public TerminalNode DOT() {
            return getToken(dartParser.DOT, 0);
        }

        public TerminalNode FILL() {
            return getToken(dartParser.FILL, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_image;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterImage(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitImage(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitImage(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ScaffoldContext extends ParserRuleContext {
        public ScaffoldContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode SCAFFOLD() {
            return getToken(dartParser.SCAFFOLD, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public BodyContext body() {
            return getRuleContext(BodyContext.class, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public AppbarContext appbar() {
            return getRuleContext(AppbarContext.class, 0);
        }

        public TerminalNode COLON() {
            return getToken(dartParser.COLON, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_scaffold;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterScaffold(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitScaffold(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitScaffold(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class AppbarContext extends ParserRuleContext {
        public AppbarContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode APPBAR2() {
            return getToken(dartParser.APPBAR2, 0);
        }

        public List<TerminalNode> D_DOT() {
            return getTokens(dartParser.D_DOT);
        }

        public TerminalNode D_DOT(int i) {
            return getToken(dartParser.D_DOT, i);
        }

        public TerminalNode APPBAR() {
            return getToken(dartParser.APPBAR, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public TerminalNode BACK() {
            return getToken(dartParser.BACK, 0);
        }

        public ColorsContext colors() {
            return getRuleContext(ColorsContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_appbar;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterAppbar(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitAppbar(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitAppbar(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class BodyContext extends ParserRuleContext {
        public BodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode BODY() {
            return getToken(dartParser.BODY, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public WidgetContext widget() {
            return getRuleContext(WidgetContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_body;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterBody(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitBody(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor) return ((dartParserVisitor<? extends T>) visitor).visitBody(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class Padding1Context extends ParserRuleContext {
        public Padding1Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode PADDING1() {
            return getToken(dartParser.PADDING1, 0);
        }

        public TerminalNode EDGE() {
            return getToken(dartParser.EDGE, 0);
        }

        public TerminalNode ALL() {
            return getToken(dartParser.ALL, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode NUM_VAL() {
            return getToken(dartParser.NUM_VAL, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_padding1;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterPadding1(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitPadding1(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitPadding1(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PaddingContext extends ParserRuleContext {
        public PaddingContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode PADDING() {
            return getToken(dartParser.PADDING, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public Padding1Context padding1() {
            return getRuleContext(Padding1Context.class, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public TerminalNode COLON() {
            return getToken(dartParser.COLON, 0);
        }

        public ChildContext child() {
            return getRuleContext(ChildContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_padding;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterPadding(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitPadding(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitPadding(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ExpandedContext extends ParserRuleContext {
        public ExpandedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode EXPANDED() {
            return getToken(dartParser.EXPANDED, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public ChildContext child() {
            return getRuleContext(ChildContext.class, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expanded;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterExpanded(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitExpanded(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitExpanded(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SizedboxContext extends ParserRuleContext {
        public SizedboxContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode SIZEDBOX() {
            return getToken(dartParser.SIZEDBOX, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public List<HieghtContext> hieght() {
            return getRuleContexts(HieghtContext.class);
        }

        public HieghtContext hieght(int i) {
            return getRuleContext(HieghtContext.class, i);
        }

        public List<WidthContext> width() {
            return getRuleContexts(WidthContext.class);
        }

        public WidthContext width(int i) {
            return getRuleContext(WidthContext.class, i);
        }

        public TerminalNode COLON() {
            return getToken(dartParser.COLON, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_sizedbox;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterSizedbox(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitSizedbox(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitSizedbox(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class HieghtContext extends ParserRuleContext {
        public HieghtContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode HEIGHT() {
            return getToken(dartParser.HEIGHT, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public TerminalNode NUM_VAL() {
            return getToken(dartParser.NUM_VAL, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_hieght;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterHieght(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitHieght(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitHieght(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class WidthContext extends ParserRuleContext {
        public WidthContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode WIDTH() {
            return getToken(dartParser.WIDTH, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public TerminalNode NUM_VAL() {
            return getToken(dartParser.NUM_VAL, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_width;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterWidth(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitWidth(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitWidth(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ListviewContext extends ParserRuleContext {
        public ListviewContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LISTVIEW() {
            return getToken(dartParser.LISTVIEW, 0);
        }

        public TerminalNode DOT() {
            return getToken(dartParser.DOT, 0);
        }

        public TerminalNode SEPARATED() {
            return getToken(dartParser.SEPARATED, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public ItbContext itb() {
            return getRuleContext(ItbContext.class, 0);
        }

        public List<WidgetContext> widget() {
            return getRuleContexts(WidgetContext.class);
        }

        public WidgetContext widget(int i) {
            return getRuleContext(WidgetContext.class, i);
        }

        public List<TerminalNode> COLON() {
            return getTokens(dartParser.COLON);
        }

        public TerminalNode COLON(int i) {
            return getToken(dartParser.COLON, i);
        }

        public SbContext sb() {
            return getRuleContext(SbContext.class, 0);
        }

        public IcContext ic() {
            return getRuleContext(IcContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_listview;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterListview(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitListview(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitListview(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ItbContext extends ParserRuleContext {
        public ItbContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode ItemBuilder() {
            return getToken(dartParser.ItemBuilder, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode CONTEXT() {
            return getToken(dartParser.CONTEXT, 0);
        }

        public TerminalNode COLON() {
            return getToken(dartParser.COLON, 0);
        }

        public TerminalNode INDEX() {
            return getToken(dartParser.INDEX, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public TerminalNode Return() {
            return getToken(dartParser.Return, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_itb;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterItb(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitItb(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor) return ((dartParserVisitor<? extends T>) visitor).visitItb(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SbContext extends ParserRuleContext {
        public SbContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode SeparatorBuilder() {
            return getToken(dartParser.SeparatorBuilder, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode CONTEXT() {
            return getToken(dartParser.CONTEXT, 0);
        }

        public TerminalNode COLON() {
            return getToken(dartParser.COLON, 0);
        }

        public TerminalNode INDEX() {
            return getToken(dartParser.INDEX, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public TerminalNode Return() {
            return getToken(dartParser.Return, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_sb;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterSb(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitSb(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor) return ((dartParserVisitor<? extends T>) visitor).visitSb(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class IcContext extends ParserRuleContext {
        public IcContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode ItemCount() {
            return getToken(dartParser.ItemCount, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public TerminalNode NUM_VAL() {
            return getToken(dartParser.NUM_VAL, 0);
        }

        public List<TerminalNode> VAR_NAME() {
            return getTokens(dartParser.VAR_NAME);
        }

        public TerminalNode VAR_NAME(int i) {
            return getToken(dartParser.VAR_NAME, i);
        }

        public TerminalNode DOT() {
            return getToken(dartParser.DOT, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_ic;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterIc(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitIc(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor) return ((dartParserVisitor<? extends T>) visitor).visitIc(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ContainerContext extends ParserRuleContext {
        public ContainerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode CONTAINER() {
            return getToken(dartParser.CONTAINER, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public List<TerminalNode> COLON() {
            return getTokens(dartParser.COLON);
        }

        public TerminalNode COLON(int i) {
            return getToken(dartParser.COLON, i);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public Padding1Context padding1() {
            return getRuleContext(Padding1Context.class, 0);
        }

        public ChildContext child() {
            return getRuleContext(ChildContext.class, 0);
        }

        public DecorationContext decoration() {
            return getRuleContext(DecorationContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_container;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterContainer(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitContainer(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitContainer(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class Bord_radContext extends ParserRuleContext {
        public Bord_radContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode BORDERRADIUS() {
            return getToken(dartParser.BORDERRADIUS, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public TerminalNode BORDER2() {
            return getToken(dartParser.BORDER2, 0);
        }

        public TerminalNode DOT() {
            return getToken(dartParser.DOT, 0);
        }

        public TerminalNode CIRCULAR() {
            return getToken(dartParser.CIRCULAR, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode NUM_VAL() {
            return getToken(dartParser.NUM_VAL, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_bord_rad;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterBord_rad(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitBord_rad(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitBord_rad(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ColorContext extends ParserRuleContext {
        public ColorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode COLOR() {
            return getToken(dartParser.COLOR, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public ColorsContext colors() {
            return getRuleContext(ColorsContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_color;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterColor(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitColor(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitColor(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ColorsContext extends ParserRuleContext {
        public ColorsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode COLORS() {
            return getToken(dartParser.COLORS, 0);
        }

        public TerminalNode DOT() {
            return getToken(dartParser.DOT, 0);
        }

        public TerminalNode COL() {
            return getToken(dartParser.COL, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_colors;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterColors(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitColors(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitColors(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DecorationContext extends ParserRuleContext {
        public DecorationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode DECORATION() {
            return getToken(dartParser.DECORATION, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public TerminalNode BD() {
            return getToken(dartParser.BD, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public List<TerminalNode> WS() {
            return getTokens(dartParser.WS);
        }

        public TerminalNode WS(int i) {
            return getToken(dartParser.WS, i);
        }

        public ColorContext color() {
            return getRuleContext(ColorContext.class, 0);
        }

        public Bord_radContext bord_rad() {
            return getRuleContext(Bord_radContext.class, 0);
        }

        public TerminalNode COLON() {
            return getToken(dartParser.COLON, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_decoration;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterDecoration(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitDecoration(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitDecoration(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ListContext extends ParserRuleContext {
        public ListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LIST() {
            return getToken(dartParser.LIST, 0);
        }

        public TerminalNode VAR_NAME() {
            return getToken(dartParser.VAR_NAME, 0);
        }

        public TerminalNode EQUAL() {
            return getToken(dartParser.EQUAL, 0);
        }

        public TerminalNode OPEN_PR() {
            return getToken(dartParser.OPEN_PR, 0);
        }

        public List<ObjectContext> object() {
            return getRuleContexts(ObjectContext.class);
        }

        public ObjectContext object(int i) {
            return getRuleContext(ObjectContext.class, i);
        }

        public TerminalNode CLOSE_PR() {
            return getToken(dartParser.CLOSE_PR, 0);
        }

        public List<TerminalNode> COLON() {
            return getTokens(dartParser.COLON);
        }

        public TerminalNode COLON(int i) {
            return getToken(dartParser.COLON, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_list;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor) return ((dartParserVisitor<? extends T>) visitor).visitList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ObjectContext extends ParserRuleContext {
        public ObjectContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode OPEN_BODY() {
            return getToken(dartParser.OPEN_BODY, 0);
        }

        public List<VaribleContext> varible() {
            return getRuleContexts(VaribleContext.class);
        }

        public VaribleContext varible(int i) {
            return getRuleContext(VaribleContext.class, i);
        }

        public TerminalNode CLOSE_BODY() {
            return getToken(dartParser.CLOSE_BODY, 0);
        }

        public List<TerminalNode> COLON() {
            return getTokens(dartParser.COLON);
        }

        public TerminalNode COLON(int i) {
            return getToken(dartParser.COLON, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_object;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterObject(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitObject(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitObject(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class VaribleContext extends ParserRuleContext {
        public VaribleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<String_valContext> string_val() {
            return getRuleContexts(String_valContext.class);
        }

        public String_valContext string_val(int i) {
            return getRuleContext(String_valContext.class, i);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_varible;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterVarible(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitVarible(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitVarible(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class GestureDetectorContext extends ParserRuleContext {
        public GestureDetectorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode GestureDetector() {
            return getToken(dartParser.GestureDetector, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public OntapContext ontap() {
            return getRuleContext(OntapContext.class, 0);
        }

        public TerminalNode COLON() {
            return getToken(dartParser.COLON, 0);
        }

        public ChildContext child() {
            return getRuleContext(ChildContext.class, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_gestureDetector;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterGestureDetector(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitGestureDetector(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitGestureDetector(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class OntapContext extends ParserRuleContext {
        public OntapContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode ONTAP() {
            return getToken(dartParser.ONTAP, 0);
        }

        public TerminalNode D_DOT() {
            return getToken(dartParser.D_DOT, 0);
        }

        public TerminalNode OPEN_HEAD() {
            return getToken(dartParser.OPEN_HEAD, 0);
        }

        public TerminalNode CLOSE_HEAD() {
            return getToken(dartParser.CLOSE_HEAD, 0);
        }

        public TerminalNode OPEN_BODY() {
            return getToken(dartParser.OPEN_BODY, 0);
        }

        public TerminalNode CLOSE_BODY() {
            return getToken(dartParser.CLOSE_BODY, 0);
        }

        public Navigate_screenContext navigate_screen() {
            return getRuleContext(Navigate_screenContext.class, 0);
        }

        public SetstateContext setstate() {
            return getRuleContext(SetstateContext.class, 0);
        }

        public List<FunctionContext> function() {
            return getRuleContexts(FunctionContext.class);
        }

        public FunctionContext function(int i) {
            return getRuleContext(FunctionContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_ontap;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterOntap(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitOntap(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitOntap(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SetstateContext extends ParserRuleContext {
        public SetstateContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode SETSTATE() {
            return getToken(dartParser.SETSTATE, 0);
        }

        public List<TerminalNode> OPEN_HEAD() {
            return getTokens(dartParser.OPEN_HEAD);
        }

        public TerminalNode OPEN_HEAD(int i) {
            return getToken(dartParser.OPEN_HEAD, i);
        }

        public List<TerminalNode> CLOSE_HEAD() {
            return getTokens(dartParser.CLOSE_HEAD);
        }

        public TerminalNode CLOSE_HEAD(int i) {
            return getToken(dartParser.CLOSE_HEAD, i);
        }

        public TerminalNode OPEN_BODY() {
            return getToken(dartParser.OPEN_BODY, 0);
        }

        public TerminalNode CLOSE_BODY() {
            return getToken(dartParser.CLOSE_BODY, 0);
        }

        public TerminalNode SIMICOLON() {
            return getToken(dartParser.SIMICOLON, 0);
        }

        public List<Setstate1Context> setstate1() {
            return getRuleContexts(Setstate1Context.class);
        }

        public Setstate1Context setstate1(int i) {
            return getRuleContext(Setstate1Context.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_setstate;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterSetstate(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitSetstate(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitSetstate(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class Setstate1Context extends ParserRuleContext {
        public Setstate1Context(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<TerminalNode> VAR_NAME() {
            return getTokens(dartParser.VAR_NAME);
        }

        public TerminalNode VAR_NAME(int i) {
            return getToken(dartParser.VAR_NAME, i);
        }

        public TerminalNode EQUAL() {
            return getToken(dartParser.EQUAL, 0);
        }

        public List<TerminalNode> OPEN_PR() {
            return getTokens(dartParser.OPEN_PR);
        }

        public TerminalNode OPEN_PR(int i) {
            return getToken(dartParser.OPEN_PR, i);
        }

        public TerminalNode INDEX() {
            return getToken(dartParser.INDEX, 0);
        }

        public List<TerminalNode> CLOSE_PR() {
            return getTokens(dartParser.CLOSE_PR);
        }

        public TerminalNode CLOSE_PR(int i) {
            return getToken(dartParser.CLOSE_PR, i);
        }

        public String_valContext string_val() {
            return getRuleContext(String_valContext.class, 0);
        }

        public TerminalNode SIMICOLON() {
            return getToken(dartParser.SIMICOLON, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_setstate1;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).enterSetstate1(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof dartParserListener) ((dartParserListener) listener).exitSetstate1(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof dartParserVisitor)
                return ((dartParserVisitor<? extends T>) visitor).visitSetstate1(this);
            else return visitor.visitChildren(this);
        }
    }
}